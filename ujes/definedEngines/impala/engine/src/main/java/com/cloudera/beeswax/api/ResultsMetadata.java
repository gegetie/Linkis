/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.cloudera.beeswax.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Metadata information about the results.
 * Applicable only for SELECT.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-12")
public class ResultsMetadata implements org.apache.thrift.TBase<ResultsMetadata, ResultsMetadata._Fields>, java.io.Serializable, Cloneable, Comparable<ResultsMetadata> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResultsMetadata");

  private static final org.apache.thrift.protocol.TField SCHEMA_FIELD_DESC = new org.apache.thrift.protocol.TField("schema", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TABLE_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("table_dir", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IN_TABLENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("in_tablename", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DELIM_FIELD_DESC = new org.apache.thrift.protocol.TField("delim", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResultsMetadataStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResultsMetadataTupleSchemeFactory();

  /**
   * The schema of the results
   */
  public @org.apache.thrift.annotation.Nullable org.apache.hadoop.hive.metastore.api.Schema schema; // required
  /**
   * The directory containing the results. Not applicable for partition table.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String table_dir; // required
  /**
   * If the results are straight from an existing table, the table name.
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String in_tablename; // required
  /**
   * Field delimiter
   */
  public @org.apache.thrift.annotation.Nullable java.lang.String delim; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The schema of the results
     */
    SCHEMA((short)1, "schema"),
    /**
     * The directory containing the results. Not applicable for partition table.
     */
    TABLE_DIR((short)2, "table_dir"),
    /**
     * If the results are straight from an existing table, the table name.
     */
    IN_TABLENAME((short)3, "in_tablename"),
    /**
     * Field delimiter
     */
    DELIM((short)4, "delim");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCHEMA
          return SCHEMA;
        case 2: // TABLE_DIR
          return TABLE_DIR;
        case 3: // IN_TABLENAME
          return IN_TABLENAME;
        case 4: // DELIM
          return DELIM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCHEMA, new org.apache.thrift.meta_data.FieldMetaData("schema", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.hadoop.hive.metastore.api.Schema.class)));
    tmpMap.put(_Fields.TABLE_DIR, new org.apache.thrift.meta_data.FieldMetaData("table_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IN_TABLENAME, new org.apache.thrift.meta_data.FieldMetaData("in_tablename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIM, new org.apache.thrift.meta_data.FieldMetaData("delim", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResultsMetadata.class, metaDataMap);
  }

  public ResultsMetadata() {
  }

  public ResultsMetadata(
    org.apache.hadoop.hive.metastore.api.Schema schema,
    java.lang.String table_dir,
    java.lang.String in_tablename,
    java.lang.String delim)
  {
    this();
    this.schema = schema;
    this.table_dir = table_dir;
    this.in_tablename = in_tablename;
    this.delim = delim;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResultsMetadata(ResultsMetadata other) {
    if (other.isSetSchema()) {
      this.schema = new org.apache.hadoop.hive.metastore.api.Schema(other.schema);
    }
    if (other.isSetTable_dir()) {
      this.table_dir = other.table_dir;
    }
    if (other.isSetIn_tablename()) {
      this.in_tablename = other.in_tablename;
    }
    if (other.isSetDelim()) {
      this.delim = other.delim;
    }
  }

  public ResultsMetadata deepCopy() {
    return new ResultsMetadata(this);
  }

  @Override
  public void clear() {
    this.schema = null;
    this.table_dir = null;
    this.in_tablename = null;
    this.delim = null;
  }

  /**
   * The schema of the results
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.hadoop.hive.metastore.api.Schema getSchema() {
    return this.schema;
  }

  /**
   * The schema of the results
   */
  public ResultsMetadata setSchema(@org.apache.thrift.annotation.Nullable org.apache.hadoop.hive.metastore.api.Schema schema) {
    this.schema = schema;
    return this;
  }

  public void unsetSchema() {
    this.schema = null;
  }

  /** Returns true if field schema is set (has been assigned a value) and false otherwise */
  public boolean isSetSchema() {
    return this.schema != null;
  }

  public void setSchemaIsSet(boolean value) {
    if (!value) {
      this.schema = null;
    }
  }

  /**
   * The directory containing the results. Not applicable for partition table.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTable_dir() {
    return this.table_dir;
  }

  /**
   * The directory containing the results. Not applicable for partition table.
   */
  public ResultsMetadata setTable_dir(@org.apache.thrift.annotation.Nullable java.lang.String table_dir) {
    this.table_dir = table_dir;
    return this;
  }

  public void unsetTable_dir() {
    this.table_dir = null;
  }

  /** Returns true if field table_dir is set (has been assigned a value) and false otherwise */
  public boolean isSetTable_dir() {
    return this.table_dir != null;
  }

  public void setTable_dirIsSet(boolean value) {
    if (!value) {
      this.table_dir = null;
    }
  }

  /**
   * If the results are straight from an existing table, the table name.
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getIn_tablename() {
    return this.in_tablename;
  }

  /**
   * If the results are straight from an existing table, the table name.
   */
  public ResultsMetadata setIn_tablename(@org.apache.thrift.annotation.Nullable java.lang.String in_tablename) {
    this.in_tablename = in_tablename;
    return this;
  }

  public void unsetIn_tablename() {
    this.in_tablename = null;
  }

  /** Returns true if field in_tablename is set (has been assigned a value) and false otherwise */
  public boolean isSetIn_tablename() {
    return this.in_tablename != null;
  }

  public void setIn_tablenameIsSet(boolean value) {
    if (!value) {
      this.in_tablename = null;
    }
  }

  /**
   * Field delimiter
   */
  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDelim() {
    return this.delim;
  }

  /**
   * Field delimiter
   */
  public ResultsMetadata setDelim(@org.apache.thrift.annotation.Nullable java.lang.String delim) {
    this.delim = delim;
    return this;
  }

  public void unsetDelim() {
    this.delim = null;
  }

  /** Returns true if field delim is set (has been assigned a value) and false otherwise */
  public boolean isSetDelim() {
    return this.delim != null;
  }

  public void setDelimIsSet(boolean value) {
    if (!value) {
      this.delim = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SCHEMA:
      if (value == null) {
        unsetSchema();
      } else {
        setSchema((org.apache.hadoop.hive.metastore.api.Schema)value);
      }
      break;

    case TABLE_DIR:
      if (value == null) {
        unsetTable_dir();
      } else {
        setTable_dir((java.lang.String)value);
      }
      break;

    case IN_TABLENAME:
      if (value == null) {
        unsetIn_tablename();
      } else {
        setIn_tablename((java.lang.String)value);
      }
      break;

    case DELIM:
      if (value == null) {
        unsetDelim();
      } else {
        setDelim((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SCHEMA:
      return getSchema();

    case TABLE_DIR:
      return getTable_dir();

    case IN_TABLENAME:
      return getIn_tablename();

    case DELIM:
      return getDelim();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SCHEMA:
      return isSetSchema();
    case TABLE_DIR:
      return isSetTable_dir();
    case IN_TABLENAME:
      return isSetIn_tablename();
    case DELIM:
      return isSetDelim();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ResultsMetadata)
      return this.equals((ResultsMetadata)that);
    return false;
  }

  public boolean equals(ResultsMetadata that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_schema = true && this.isSetSchema();
    boolean that_present_schema = true && that.isSetSchema();
    if (this_present_schema || that_present_schema) {
      if (!(this_present_schema && that_present_schema))
        return false;
      if (!this.schema.equals(that.schema))
        return false;
    }

    boolean this_present_table_dir = true && this.isSetTable_dir();
    boolean that_present_table_dir = true && that.isSetTable_dir();
    if (this_present_table_dir || that_present_table_dir) {
      if (!(this_present_table_dir && that_present_table_dir))
        return false;
      if (!this.table_dir.equals(that.table_dir))
        return false;
    }

    boolean this_present_in_tablename = true && this.isSetIn_tablename();
    boolean that_present_in_tablename = true && that.isSetIn_tablename();
    if (this_present_in_tablename || that_present_in_tablename) {
      if (!(this_present_in_tablename && that_present_in_tablename))
        return false;
      if (!this.in_tablename.equals(that.in_tablename))
        return false;
    }

    boolean this_present_delim = true && this.isSetDelim();
    boolean that_present_delim = true && that.isSetDelim();
    if (this_present_delim || that_present_delim) {
      if (!(this_present_delim && that_present_delim))
        return false;
      if (!this.delim.equals(that.delim))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSchema()) ? 131071 : 524287);
    if (isSetSchema())
      hashCode = hashCode * 8191 + schema.hashCode();

    hashCode = hashCode * 8191 + ((isSetTable_dir()) ? 131071 : 524287);
    if (isSetTable_dir())
      hashCode = hashCode * 8191 + table_dir.hashCode();

    hashCode = hashCode * 8191 + ((isSetIn_tablename()) ? 131071 : 524287);
    if (isSetIn_tablename())
      hashCode = hashCode * 8191 + in_tablename.hashCode();

    hashCode = hashCode * 8191 + ((isSetDelim()) ? 131071 : 524287);
    if (isSetDelim())
      hashCode = hashCode * 8191 + delim.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ResultsMetadata other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSchema()).compareTo(other.isSetSchema());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSchema()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.schema, other.schema);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTable_dir()).compareTo(other.isSetTable_dir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable_dir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table_dir, other.table_dir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIn_tablename()).compareTo(other.isSetIn_tablename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIn_tablename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.in_tablename, other.in_tablename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDelim()).compareTo(other.isSetDelim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delim, other.delim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ResultsMetadata(");
    boolean first = true;

    sb.append("schema:");
    if (this.schema == null) {
      sb.append("null");
    } else {
      sb.append(this.schema);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("table_dir:");
    if (this.table_dir == null) {
      sb.append("null");
    } else {
      sb.append(this.table_dir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("in_tablename:");
    if (this.in_tablename == null) {
      sb.append("null");
    } else {
      sb.append(this.in_tablename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("delim:");
    if (this.delim == null) {
      sb.append("null");
    } else {
      sb.append(this.delim);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (schema != null) {
      schema.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultsMetadataStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultsMetadataStandardScheme getScheme() {
      return new ResultsMetadataStandardScheme();
    }
  }

  private static class ResultsMetadataStandardScheme extends org.apache.thrift.scheme.StandardScheme<ResultsMetadata> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResultsMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCHEMA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.schema = new org.apache.hadoop.hive.metastore.api.Schema();
              struct.schema.read(iprot);
              struct.setSchemaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TABLE_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table_dir = iprot.readString();
              struct.setTable_dirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IN_TABLENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.in_tablename = iprot.readString();
              struct.setIn_tablenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DELIM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.delim = iprot.readString();
              struct.setDelimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResultsMetadata struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.schema != null) {
        oprot.writeFieldBegin(SCHEMA_FIELD_DESC);
        struct.schema.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.table_dir != null) {
        oprot.writeFieldBegin(TABLE_DIR_FIELD_DESC);
        oprot.writeString(struct.table_dir);
        oprot.writeFieldEnd();
      }
      if (struct.in_tablename != null) {
        oprot.writeFieldBegin(IN_TABLENAME_FIELD_DESC);
        oprot.writeString(struct.in_tablename);
        oprot.writeFieldEnd();
      }
      if (struct.delim != null) {
        oprot.writeFieldBegin(DELIM_FIELD_DESC);
        oprot.writeString(struct.delim);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultsMetadataTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultsMetadataTupleScheme getScheme() {
      return new ResultsMetadataTupleScheme();
    }
  }

  private static class ResultsMetadataTupleScheme extends org.apache.thrift.scheme.TupleScheme<ResultsMetadata> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResultsMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSchema()) {
        optionals.set(0);
      }
      if (struct.isSetTable_dir()) {
        optionals.set(1);
      }
      if (struct.isSetIn_tablename()) {
        optionals.set(2);
      }
      if (struct.isSetDelim()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSchema()) {
        struct.schema.write(oprot);
      }
      if (struct.isSetTable_dir()) {
        oprot.writeString(struct.table_dir);
      }
      if (struct.isSetIn_tablename()) {
        oprot.writeString(struct.in_tablename);
      }
      if (struct.isSetDelim()) {
        oprot.writeString(struct.delim);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResultsMetadata struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.schema = new org.apache.hadoop.hive.metastore.api.Schema();
        struct.schema.read(iprot);
        struct.setSchemaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.table_dir = iprot.readString();
        struct.setTable_dirIsSet(true);
      }
      if (incoming.get(2)) {
        struct.in_tablename = iprot.readString();
        struct.setIn_tablenameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.delim = iprot.readString();
        struct.setDelimIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

