/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-12")
public class TRuntimeProfileNode implements org.apache.thrift.TBase<TRuntimeProfileNode, TRuntimeProfileNode._Fields>, java.io.Serializable, Cloneable, Comparable<TRuntimeProfileNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TRuntimeProfileNode");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_CHILDREN_FIELD_DESC = new org.apache.thrift.protocol.TField("num_children", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("counters", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField INDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("indent", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField INFO_STRINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("info_strings", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField INFO_STRINGS_DISPLAY_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("info_strings_display_order", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField CHILD_COUNTERS_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("child_counters_map", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField EVENT_SEQUENCES_FIELD_DESC = new org.apache.thrift.protocol.TField("event_sequences", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField TIME_SERIES_COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("time_series_counters", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField SUMMARY_STATS_COUNTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("summary_stats_counters", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField NODE_METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("node_metadata", org.apache.thrift.protocol.TType.STRUCT, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TRuntimeProfileNodeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TRuntimeProfileNodeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public int num_children; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TCounter> counters; // required
  public long metadata; // required
  public boolean indent; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> info_strings; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> info_strings_display_order; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.Set<java.lang.String>> child_counters_map; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<TEventSequence> event_sequences; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TTimeSeriesCounter> time_series_counters; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TSummaryStatsCounter> summary_stats_counters; // optional
  public @org.apache.thrift.annotation.Nullable TRuntimeProfileNodeMetadata node_metadata; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    NUM_CHILDREN((short)2, "num_children"),
    COUNTERS((short)3, "counters"),
    METADATA((short)4, "metadata"),
    INDENT((short)5, "indent"),
    INFO_STRINGS((short)6, "info_strings"),
    INFO_STRINGS_DISPLAY_ORDER((short)7, "info_strings_display_order"),
    CHILD_COUNTERS_MAP((short)8, "child_counters_map"),
    EVENT_SEQUENCES((short)9, "event_sequences"),
    TIME_SERIES_COUNTERS((short)10, "time_series_counters"),
    SUMMARY_STATS_COUNTERS((short)11, "summary_stats_counters"),
    NODE_METADATA((short)12, "node_metadata");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // NUM_CHILDREN
          return NUM_CHILDREN;
        case 3: // COUNTERS
          return COUNTERS;
        case 4: // METADATA
          return METADATA;
        case 5: // INDENT
          return INDENT;
        case 6: // INFO_STRINGS
          return INFO_STRINGS;
        case 7: // INFO_STRINGS_DISPLAY_ORDER
          return INFO_STRINGS_DISPLAY_ORDER;
        case 8: // CHILD_COUNTERS_MAP
          return CHILD_COUNTERS_MAP;
        case 9: // EVENT_SEQUENCES
          return EVENT_SEQUENCES;
        case 10: // TIME_SERIES_COUNTERS
          return TIME_SERIES_COUNTERS;
        case 11: // SUMMARY_STATS_COUNTERS
          return SUMMARY_STATS_COUNTERS;
        case 12: // NODE_METADATA
          return NODE_METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_CHILDREN_ISSET_ID = 0;
  private static final int __METADATA_ISSET_ID = 1;
  private static final int __INDENT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EVENT_SEQUENCES,_Fields.TIME_SERIES_COUNTERS,_Fields.SUMMARY_STATS_COUNTERS,_Fields.NODE_METADATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_CHILDREN, new org.apache.thrift.meta_data.FieldMetaData("num_children", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("counters", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCounter.class))));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INDENT, new org.apache.thrift.meta_data.FieldMetaData("indent", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.INFO_STRINGS, new org.apache.thrift.meta_data.FieldMetaData("info_strings", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INFO_STRINGS_DISPLAY_ORDER, new org.apache.thrift.meta_data.FieldMetaData("info_strings_display_order", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.CHILD_COUNTERS_MAP, new org.apache.thrift.meta_data.FieldMetaData("child_counters_map", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.EVENT_SEQUENCES, new org.apache.thrift.meta_data.FieldMetaData("event_sequences", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEventSequence.class))));
    tmpMap.put(_Fields.TIME_SERIES_COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("time_series_counters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTimeSeriesCounter.class))));
    tmpMap.put(_Fields.SUMMARY_STATS_COUNTERS, new org.apache.thrift.meta_data.FieldMetaData("summary_stats_counters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSummaryStatsCounter.class))));
    tmpMap.put(_Fields.NODE_METADATA, new org.apache.thrift.meta_data.FieldMetaData("node_metadata", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TRuntimeProfileNodeMetadata.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TRuntimeProfileNode.class, metaDataMap);
  }

  public TRuntimeProfileNode() {
  }

  public TRuntimeProfileNode(
    java.lang.String name,
    int num_children,
    java.util.List<TCounter> counters,
    long metadata,
    boolean indent,
    java.util.Map<java.lang.String,java.lang.String> info_strings,
    java.util.List<java.lang.String> info_strings_display_order,
    java.util.Map<java.lang.String,java.util.Set<java.lang.String>> child_counters_map)
  {
    this();
    this.name = name;
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    this.counters = counters;
    this.metadata = metadata;
    setMetadataIsSet(true);
    this.indent = indent;
    setIndentIsSet(true);
    this.info_strings = info_strings;
    this.info_strings_display_order = info_strings_display_order;
    this.child_counters_map = child_counters_map;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TRuntimeProfileNode(TRuntimeProfileNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.num_children = other.num_children;
    if (other.isSetCounters()) {
      java.util.List<TCounter> __this__counters = new java.util.ArrayList<TCounter>(other.counters.size());
      for (TCounter other_element : other.counters) {
        __this__counters.add(new TCounter(other_element));
      }
      this.counters = __this__counters;
    }
    this.metadata = other.metadata;
    this.indent = other.indent;
    if (other.isSetInfo_strings()) {
      java.util.Map<java.lang.String,java.lang.String> __this__info_strings = new java.util.HashMap<java.lang.String,java.lang.String>(other.info_strings);
      this.info_strings = __this__info_strings;
    }
    if (other.isSetInfo_strings_display_order()) {
      java.util.List<java.lang.String> __this__info_strings_display_order = new java.util.ArrayList<java.lang.String>(other.info_strings_display_order);
      this.info_strings_display_order = __this__info_strings_display_order;
    }
    if (other.isSetChild_counters_map()) {
      java.util.Map<java.lang.String,java.util.Set<java.lang.String>> __this__child_counters_map = new java.util.HashMap<java.lang.String,java.util.Set<java.lang.String>>(other.child_counters_map.size());
      for (java.util.Map.Entry<java.lang.String, java.util.Set<java.lang.String>> other_element : other.child_counters_map.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.Set<java.lang.String> other_element_value = other_element.getValue();

        java.lang.String __this__child_counters_map_copy_key = other_element_key;

        java.util.Set<java.lang.String> __this__child_counters_map_copy_value = new java.util.HashSet<java.lang.String>(other_element_value);

        __this__child_counters_map.put(__this__child_counters_map_copy_key, __this__child_counters_map_copy_value);
      }
      this.child_counters_map = __this__child_counters_map;
    }
    if (other.isSetEvent_sequences()) {
      java.util.List<TEventSequence> __this__event_sequences = new java.util.ArrayList<TEventSequence>(other.event_sequences.size());
      for (TEventSequence other_element : other.event_sequences) {
        __this__event_sequences.add(new TEventSequence(other_element));
      }
      this.event_sequences = __this__event_sequences;
    }
    if (other.isSetTime_series_counters()) {
      java.util.List<TTimeSeriesCounter> __this__time_series_counters = new java.util.ArrayList<TTimeSeriesCounter>(other.time_series_counters.size());
      for (TTimeSeriesCounter other_element : other.time_series_counters) {
        __this__time_series_counters.add(new TTimeSeriesCounter(other_element));
      }
      this.time_series_counters = __this__time_series_counters;
    }
    if (other.isSetSummary_stats_counters()) {
      java.util.List<TSummaryStatsCounter> __this__summary_stats_counters = new java.util.ArrayList<TSummaryStatsCounter>(other.summary_stats_counters.size());
      for (TSummaryStatsCounter other_element : other.summary_stats_counters) {
        __this__summary_stats_counters.add(new TSummaryStatsCounter(other_element));
      }
      this.summary_stats_counters = __this__summary_stats_counters;
    }
    if (other.isSetNode_metadata()) {
      this.node_metadata = new TRuntimeProfileNodeMetadata(other.node_metadata);
    }
  }

  public TRuntimeProfileNode deepCopy() {
    return new TRuntimeProfileNode(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setNum_childrenIsSet(false);
    this.num_children = 0;
    this.counters = null;
    setMetadataIsSet(false);
    this.metadata = 0;
    setIndentIsSet(false);
    this.indent = false;
    this.info_strings = null;
    this.info_strings_display_order = null;
    this.child_counters_map = null;
    this.event_sequences = null;
    this.time_series_counters = null;
    this.summary_stats_counters = null;
    this.node_metadata = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TRuntimeProfileNode setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getNum_children() {
    return this.num_children;
  }

  public TRuntimeProfileNode setNum_children(int num_children) {
    this.num_children = num_children;
    setNum_childrenIsSet(true);
    return this;
  }

  public void unsetNum_children() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  /** Returns true if field num_children is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_children() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID);
  }

  public void setNum_childrenIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_CHILDREN_ISSET_ID, value);
  }

  public int getCountersSize() {
    return (this.counters == null) ? 0 : this.counters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TCounter> getCountersIterator() {
    return (this.counters == null) ? null : this.counters.iterator();
  }

  public void addToCounters(TCounter elem) {
    if (this.counters == null) {
      this.counters = new java.util.ArrayList<TCounter>();
    }
    this.counters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TCounter> getCounters() {
    return this.counters;
  }

  public TRuntimeProfileNode setCounters(@org.apache.thrift.annotation.Nullable java.util.List<TCounter> counters) {
    this.counters = counters;
    return this;
  }

  public void unsetCounters() {
    this.counters = null;
  }

  /** Returns true if field counters is set (has been assigned a value) and false otherwise */
  public boolean isSetCounters() {
    return this.counters != null;
  }

  public void setCountersIsSet(boolean value) {
    if (!value) {
      this.counters = null;
    }
  }

  public long getMetadata() {
    return this.metadata;
  }

  public TRuntimeProfileNode setMetadata(long metadata) {
    this.metadata = metadata;
    setMetadataIsSet(true);
    return this;
  }

  public void unsetMetadata() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __METADATA_ISSET_ID);
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __METADATA_ISSET_ID);
  }

  public void setMetadataIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __METADATA_ISSET_ID, value);
  }

  public boolean isIndent() {
    return this.indent;
  }

  public TRuntimeProfileNode setIndent(boolean indent) {
    this.indent = indent;
    setIndentIsSet(true);
    return this;
  }

  public void unsetIndent() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDENT_ISSET_ID);
  }

  /** Returns true if field indent is set (has been assigned a value) and false otherwise */
  public boolean isSetIndent() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDENT_ISSET_ID);
  }

  public void setIndentIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDENT_ISSET_ID, value);
  }

  public int getInfo_stringsSize() {
    return (this.info_strings == null) ? 0 : this.info_strings.size();
  }

  public void putToInfo_strings(java.lang.String key, java.lang.String val) {
    if (this.info_strings == null) {
      this.info_strings = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.info_strings.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getInfo_strings() {
    return this.info_strings;
  }

  public TRuntimeProfileNode setInfo_strings(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> info_strings) {
    this.info_strings = info_strings;
    return this;
  }

  public void unsetInfo_strings() {
    this.info_strings = null;
  }

  /** Returns true if field info_strings is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo_strings() {
    return this.info_strings != null;
  }

  public void setInfo_stringsIsSet(boolean value) {
    if (!value) {
      this.info_strings = null;
    }
  }

  public int getInfo_strings_display_orderSize() {
    return (this.info_strings_display_order == null) ? 0 : this.info_strings_display_order.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getInfo_strings_display_orderIterator() {
    return (this.info_strings_display_order == null) ? null : this.info_strings_display_order.iterator();
  }

  public void addToInfo_strings_display_order(java.lang.String elem) {
    if (this.info_strings_display_order == null) {
      this.info_strings_display_order = new java.util.ArrayList<java.lang.String>();
    }
    this.info_strings_display_order.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getInfo_strings_display_order() {
    return this.info_strings_display_order;
  }

  public TRuntimeProfileNode setInfo_strings_display_order(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> info_strings_display_order) {
    this.info_strings_display_order = info_strings_display_order;
    return this;
  }

  public void unsetInfo_strings_display_order() {
    this.info_strings_display_order = null;
  }

  /** Returns true if field info_strings_display_order is set (has been assigned a value) and false otherwise */
  public boolean isSetInfo_strings_display_order() {
    return this.info_strings_display_order != null;
  }

  public void setInfo_strings_display_orderIsSet(boolean value) {
    if (!value) {
      this.info_strings_display_order = null;
    }
  }

  public int getChild_counters_mapSize() {
    return (this.child_counters_map == null) ? 0 : this.child_counters_map.size();
  }

  public void putToChild_counters_map(java.lang.String key, java.util.Set<java.lang.String> val) {
    if (this.child_counters_map == null) {
      this.child_counters_map = new java.util.HashMap<java.lang.String,java.util.Set<java.lang.String>>();
    }
    this.child_counters_map.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.util.Set<java.lang.String>> getChild_counters_map() {
    return this.child_counters_map;
  }

  public TRuntimeProfileNode setChild_counters_map(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.Set<java.lang.String>> child_counters_map) {
    this.child_counters_map = child_counters_map;
    return this;
  }

  public void unsetChild_counters_map() {
    this.child_counters_map = null;
  }

  /** Returns true if field child_counters_map is set (has been assigned a value) and false otherwise */
  public boolean isSetChild_counters_map() {
    return this.child_counters_map != null;
  }

  public void setChild_counters_mapIsSet(boolean value) {
    if (!value) {
      this.child_counters_map = null;
    }
  }

  public int getEvent_sequencesSize() {
    return (this.event_sequences == null) ? 0 : this.event_sequences.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TEventSequence> getEvent_sequencesIterator() {
    return (this.event_sequences == null) ? null : this.event_sequences.iterator();
  }

  public void addToEvent_sequences(TEventSequence elem) {
    if (this.event_sequences == null) {
      this.event_sequences = new java.util.ArrayList<TEventSequence>();
    }
    this.event_sequences.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TEventSequence> getEvent_sequences() {
    return this.event_sequences;
  }

  public TRuntimeProfileNode setEvent_sequences(@org.apache.thrift.annotation.Nullable java.util.List<TEventSequence> event_sequences) {
    this.event_sequences = event_sequences;
    return this;
  }

  public void unsetEvent_sequences() {
    this.event_sequences = null;
  }

  /** Returns true if field event_sequences is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_sequences() {
    return this.event_sequences != null;
  }

  public void setEvent_sequencesIsSet(boolean value) {
    if (!value) {
      this.event_sequences = null;
    }
  }

  public int getTime_series_countersSize() {
    return (this.time_series_counters == null) ? 0 : this.time_series_counters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TTimeSeriesCounter> getTime_series_countersIterator() {
    return (this.time_series_counters == null) ? null : this.time_series_counters.iterator();
  }

  public void addToTime_series_counters(TTimeSeriesCounter elem) {
    if (this.time_series_counters == null) {
      this.time_series_counters = new java.util.ArrayList<TTimeSeriesCounter>();
    }
    this.time_series_counters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TTimeSeriesCounter> getTime_series_counters() {
    return this.time_series_counters;
  }

  public TRuntimeProfileNode setTime_series_counters(@org.apache.thrift.annotation.Nullable java.util.List<TTimeSeriesCounter> time_series_counters) {
    this.time_series_counters = time_series_counters;
    return this;
  }

  public void unsetTime_series_counters() {
    this.time_series_counters = null;
  }

  /** Returns true if field time_series_counters is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_series_counters() {
    return this.time_series_counters != null;
  }

  public void setTime_series_countersIsSet(boolean value) {
    if (!value) {
      this.time_series_counters = null;
    }
  }

  public int getSummary_stats_countersSize() {
    return (this.summary_stats_counters == null) ? 0 : this.summary_stats_counters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TSummaryStatsCounter> getSummary_stats_countersIterator() {
    return (this.summary_stats_counters == null) ? null : this.summary_stats_counters.iterator();
  }

  public void addToSummary_stats_counters(TSummaryStatsCounter elem) {
    if (this.summary_stats_counters == null) {
      this.summary_stats_counters = new java.util.ArrayList<TSummaryStatsCounter>();
    }
    this.summary_stats_counters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TSummaryStatsCounter> getSummary_stats_counters() {
    return this.summary_stats_counters;
  }

  public TRuntimeProfileNode setSummary_stats_counters(@org.apache.thrift.annotation.Nullable java.util.List<TSummaryStatsCounter> summary_stats_counters) {
    this.summary_stats_counters = summary_stats_counters;
    return this;
  }

  public void unsetSummary_stats_counters() {
    this.summary_stats_counters = null;
  }

  /** Returns true if field summary_stats_counters is set (has been assigned a value) and false otherwise */
  public boolean isSetSummary_stats_counters() {
    return this.summary_stats_counters != null;
  }

  public void setSummary_stats_countersIsSet(boolean value) {
    if (!value) {
      this.summary_stats_counters = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TRuntimeProfileNodeMetadata getNode_metadata() {
    return this.node_metadata;
  }

  public TRuntimeProfileNode setNode_metadata(@org.apache.thrift.annotation.Nullable TRuntimeProfileNodeMetadata node_metadata) {
    this.node_metadata = node_metadata;
    return this;
  }

  public void unsetNode_metadata() {
    this.node_metadata = null;
  }

  /** Returns true if field node_metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetNode_metadata() {
    return this.node_metadata != null;
  }

  public void setNode_metadataIsSet(boolean value) {
    if (!value) {
      this.node_metadata = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case NUM_CHILDREN:
      if (value == null) {
        unsetNum_children();
      } else {
        setNum_children((java.lang.Integer)value);
      }
      break;

    case COUNTERS:
      if (value == null) {
        unsetCounters();
      } else {
        setCounters((java.util.List<TCounter>)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((java.lang.Long)value);
      }
      break;

    case INDENT:
      if (value == null) {
        unsetIndent();
      } else {
        setIndent((java.lang.Boolean)value);
      }
      break;

    case INFO_STRINGS:
      if (value == null) {
        unsetInfo_strings();
      } else {
        setInfo_strings((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case INFO_STRINGS_DISPLAY_ORDER:
      if (value == null) {
        unsetInfo_strings_display_order();
      } else {
        setInfo_strings_display_order((java.util.List<java.lang.String>)value);
      }
      break;

    case CHILD_COUNTERS_MAP:
      if (value == null) {
        unsetChild_counters_map();
      } else {
        setChild_counters_map((java.util.Map<java.lang.String,java.util.Set<java.lang.String>>)value);
      }
      break;

    case EVENT_SEQUENCES:
      if (value == null) {
        unsetEvent_sequences();
      } else {
        setEvent_sequences((java.util.List<TEventSequence>)value);
      }
      break;

    case TIME_SERIES_COUNTERS:
      if (value == null) {
        unsetTime_series_counters();
      } else {
        setTime_series_counters((java.util.List<TTimeSeriesCounter>)value);
      }
      break;

    case SUMMARY_STATS_COUNTERS:
      if (value == null) {
        unsetSummary_stats_counters();
      } else {
        setSummary_stats_counters((java.util.List<TSummaryStatsCounter>)value);
      }
      break;

    case NODE_METADATA:
      if (value == null) {
        unsetNode_metadata();
      } else {
        setNode_metadata((TRuntimeProfileNodeMetadata)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case NUM_CHILDREN:
      return getNum_children();

    case COUNTERS:
      return getCounters();

    case METADATA:
      return getMetadata();

    case INDENT:
      return isIndent();

    case INFO_STRINGS:
      return getInfo_strings();

    case INFO_STRINGS_DISPLAY_ORDER:
      return getInfo_strings_display_order();

    case CHILD_COUNTERS_MAP:
      return getChild_counters_map();

    case EVENT_SEQUENCES:
      return getEvent_sequences();

    case TIME_SERIES_COUNTERS:
      return getTime_series_counters();

    case SUMMARY_STATS_COUNTERS:
      return getSummary_stats_counters();

    case NODE_METADATA:
      return getNode_metadata();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case NUM_CHILDREN:
      return isSetNum_children();
    case COUNTERS:
      return isSetCounters();
    case METADATA:
      return isSetMetadata();
    case INDENT:
      return isSetIndent();
    case INFO_STRINGS:
      return isSetInfo_strings();
    case INFO_STRINGS_DISPLAY_ORDER:
      return isSetInfo_strings_display_order();
    case CHILD_COUNTERS_MAP:
      return isSetChild_counters_map();
    case EVENT_SEQUENCES:
      return isSetEvent_sequences();
    case TIME_SERIES_COUNTERS:
      return isSetTime_series_counters();
    case SUMMARY_STATS_COUNTERS:
      return isSetSummary_stats_counters();
    case NODE_METADATA:
      return isSetNode_metadata();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TRuntimeProfileNode)
      return this.equals((TRuntimeProfileNode)that);
    return false;
  }

  public boolean equals(TRuntimeProfileNode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_num_children = true;
    boolean that_present_num_children = true;
    if (this_present_num_children || that_present_num_children) {
      if (!(this_present_num_children && that_present_num_children))
        return false;
      if (this.num_children != that.num_children)
        return false;
    }

    boolean this_present_counters = true && this.isSetCounters();
    boolean that_present_counters = true && that.isSetCounters();
    if (this_present_counters || that_present_counters) {
      if (!(this_present_counters && that_present_counters))
        return false;
      if (!this.counters.equals(that.counters))
        return false;
    }

    boolean this_present_metadata = true;
    boolean that_present_metadata = true;
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (this.metadata != that.metadata)
        return false;
    }

    boolean this_present_indent = true;
    boolean that_present_indent = true;
    if (this_present_indent || that_present_indent) {
      if (!(this_present_indent && that_present_indent))
        return false;
      if (this.indent != that.indent)
        return false;
    }

    boolean this_present_info_strings = true && this.isSetInfo_strings();
    boolean that_present_info_strings = true && that.isSetInfo_strings();
    if (this_present_info_strings || that_present_info_strings) {
      if (!(this_present_info_strings && that_present_info_strings))
        return false;
      if (!this.info_strings.equals(that.info_strings))
        return false;
    }

    boolean this_present_info_strings_display_order = true && this.isSetInfo_strings_display_order();
    boolean that_present_info_strings_display_order = true && that.isSetInfo_strings_display_order();
    if (this_present_info_strings_display_order || that_present_info_strings_display_order) {
      if (!(this_present_info_strings_display_order && that_present_info_strings_display_order))
        return false;
      if (!this.info_strings_display_order.equals(that.info_strings_display_order))
        return false;
    }

    boolean this_present_child_counters_map = true && this.isSetChild_counters_map();
    boolean that_present_child_counters_map = true && that.isSetChild_counters_map();
    if (this_present_child_counters_map || that_present_child_counters_map) {
      if (!(this_present_child_counters_map && that_present_child_counters_map))
        return false;
      if (!this.child_counters_map.equals(that.child_counters_map))
        return false;
    }

    boolean this_present_event_sequences = true && this.isSetEvent_sequences();
    boolean that_present_event_sequences = true && that.isSetEvent_sequences();
    if (this_present_event_sequences || that_present_event_sequences) {
      if (!(this_present_event_sequences && that_present_event_sequences))
        return false;
      if (!this.event_sequences.equals(that.event_sequences))
        return false;
    }

    boolean this_present_time_series_counters = true && this.isSetTime_series_counters();
    boolean that_present_time_series_counters = true && that.isSetTime_series_counters();
    if (this_present_time_series_counters || that_present_time_series_counters) {
      if (!(this_present_time_series_counters && that_present_time_series_counters))
        return false;
      if (!this.time_series_counters.equals(that.time_series_counters))
        return false;
    }

    boolean this_present_summary_stats_counters = true && this.isSetSummary_stats_counters();
    boolean that_present_summary_stats_counters = true && that.isSetSummary_stats_counters();
    if (this_present_summary_stats_counters || that_present_summary_stats_counters) {
      if (!(this_present_summary_stats_counters && that_present_summary_stats_counters))
        return false;
      if (!this.summary_stats_counters.equals(that.summary_stats_counters))
        return false;
    }

    boolean this_present_node_metadata = true && this.isSetNode_metadata();
    boolean that_present_node_metadata = true && that.isSetNode_metadata();
    if (this_present_node_metadata || that_present_node_metadata) {
      if (!(this_present_node_metadata && that_present_node_metadata))
        return false;
      if (!this.node_metadata.equals(that.node_metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + num_children;

    hashCode = hashCode * 8191 + ((isSetCounters()) ? 131071 : 524287);
    if (isSetCounters())
      hashCode = hashCode * 8191 + counters.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(metadata);

    hashCode = hashCode * 8191 + ((indent) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetInfo_strings()) ? 131071 : 524287);
    if (isSetInfo_strings())
      hashCode = hashCode * 8191 + info_strings.hashCode();

    hashCode = hashCode * 8191 + ((isSetInfo_strings_display_order()) ? 131071 : 524287);
    if (isSetInfo_strings_display_order())
      hashCode = hashCode * 8191 + info_strings_display_order.hashCode();

    hashCode = hashCode * 8191 + ((isSetChild_counters_map()) ? 131071 : 524287);
    if (isSetChild_counters_map())
      hashCode = hashCode * 8191 + child_counters_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetEvent_sequences()) ? 131071 : 524287);
    if (isSetEvent_sequences())
      hashCode = hashCode * 8191 + event_sequences.hashCode();

    hashCode = hashCode * 8191 + ((isSetTime_series_counters()) ? 131071 : 524287);
    if (isSetTime_series_counters())
      hashCode = hashCode * 8191 + time_series_counters.hashCode();

    hashCode = hashCode * 8191 + ((isSetSummary_stats_counters()) ? 131071 : 524287);
    if (isSetSummary_stats_counters())
      hashCode = hashCode * 8191 + summary_stats_counters.hashCode();

    hashCode = hashCode * 8191 + ((isSetNode_metadata()) ? 131071 : 524287);
    if (isSetNode_metadata())
      hashCode = hashCode * 8191 + node_metadata.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TRuntimeProfileNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNum_children()).compareTo(other.isSetNum_children());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_children()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_children, other.num_children);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCounters()).compareTo(other.isSetCounters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCounters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.counters, other.counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIndent()).compareTo(other.isSetIndent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indent, other.indent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInfo_strings()).compareTo(other.isSetInfo_strings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo_strings()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info_strings, other.info_strings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInfo_strings_display_order()).compareTo(other.isSetInfo_strings_display_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInfo_strings_display_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info_strings_display_order, other.info_strings_display_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChild_counters_map()).compareTo(other.isSetChild_counters_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChild_counters_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.child_counters_map, other.child_counters_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEvent_sequences()).compareTo(other.isSetEvent_sequences());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_sequences()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_sequences, other.event_sequences);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTime_series_counters()).compareTo(other.isSetTime_series_counters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_series_counters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_series_counters, other.time_series_counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSummary_stats_counters()).compareTo(other.isSetSummary_stats_counters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSummary_stats_counters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.summary_stats_counters, other.summary_stats_counters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNode_metadata()).compareTo(other.isSetNode_metadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNode_metadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.node_metadata, other.node_metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TRuntimeProfileNode(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_children:");
    sb.append(this.num_children);
    first = false;
    if (!first) sb.append(", ");
    sb.append("counters:");
    if (this.counters == null) {
      sb.append("null");
    } else {
      sb.append(this.counters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata:");
    sb.append(this.metadata);
    first = false;
    if (!first) sb.append(", ");
    sb.append("indent:");
    sb.append(this.indent);
    first = false;
    if (!first) sb.append(", ");
    sb.append("info_strings:");
    if (this.info_strings == null) {
      sb.append("null");
    } else {
      sb.append(this.info_strings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("info_strings_display_order:");
    if (this.info_strings_display_order == null) {
      sb.append("null");
    } else {
      sb.append(this.info_strings_display_order);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("child_counters_map:");
    if (this.child_counters_map == null) {
      sb.append("null");
    } else {
      sb.append(this.child_counters_map);
    }
    first = false;
    if (isSetEvent_sequences()) {
      if (!first) sb.append(", ");
      sb.append("event_sequences:");
      if (this.event_sequences == null) {
        sb.append("null");
      } else {
        sb.append(this.event_sequences);
      }
      first = false;
    }
    if (isSetTime_series_counters()) {
      if (!first) sb.append(", ");
      sb.append("time_series_counters:");
      if (this.time_series_counters == null) {
        sb.append("null");
      } else {
        sb.append(this.time_series_counters);
      }
      first = false;
    }
    if (isSetSummary_stats_counters()) {
      if (!first) sb.append(", ");
      sb.append("summary_stats_counters:");
      if (this.summary_stats_counters == null) {
        sb.append("null");
      } else {
        sb.append(this.summary_stats_counters);
      }
      first = false;
    }
    if (isSetNode_metadata()) {
      if (!first) sb.append(", ");
      sb.append("node_metadata:");
      if (this.node_metadata == null) {
        sb.append("null");
      } else {
        sb.append(this.node_metadata);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'num_children' because it's a primitive and you chose the non-beans generator.
    if (counters == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'counters' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'metadata' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'indent' because it's a primitive and you chose the non-beans generator.
    if (info_strings == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'info_strings' was not present! Struct: " + toString());
    }
    if (info_strings_display_order == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'info_strings_display_order' was not present! Struct: " + toString());
    }
    if (child_counters_map == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'child_counters_map' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TRuntimeProfileNodeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRuntimeProfileNodeStandardScheme getScheme() {
      return new TRuntimeProfileNodeStandardScheme();
    }
  }

  private static class TRuntimeProfileNodeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TRuntimeProfileNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TRuntimeProfileNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_CHILDREN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_children = iprot.readI32();
              struct.setNum_childrenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.counters = new java.util.ArrayList<TCounter>(_list24.size);
                @org.apache.thrift.annotation.Nullable TCounter _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new TCounter();
                  _elem25.read(iprot);
                  struct.counters.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setCountersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.metadata = iprot.readI64();
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INDENT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.indent = iprot.readBool();
              struct.setIndentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INFO_STRINGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map27 = iprot.readMapBegin();
                struct.info_strings = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map27.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key28;
                @org.apache.thrift.annotation.Nullable java.lang.String _val29;
                for (int _i30 = 0; _i30 < _map27.size; ++_i30)
                {
                  _key28 = iprot.readString();
                  _val29 = iprot.readString();
                  struct.info_strings.put(_key28, _val29);
                }
                iprot.readMapEnd();
              }
              struct.setInfo_stringsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INFO_STRINGS_DISPLAY_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list31 = iprot.readListBegin();
                struct.info_strings_display_order = new java.util.ArrayList<java.lang.String>(_list31.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem32;
                for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                {
                  _elem32 = iprot.readString();
                  struct.info_strings_display_order.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setInfo_strings_display_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHILD_COUNTERS_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                struct.child_counters_map = new java.util.HashMap<java.lang.String,java.util.Set<java.lang.String>>(2*_map34.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key35;
                @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> _val36;
                for (int _i37 = 0; _i37 < _map34.size; ++_i37)
                {
                  _key35 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TSet _set38 = iprot.readSetBegin();
                    _val36 = new java.util.HashSet<java.lang.String>(2*_set38.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem39;
                    for (int _i40 = 0; _i40 < _set38.size; ++_i40)
                    {
                      _elem39 = iprot.readString();
                      _val36.add(_elem39);
                    }
                    iprot.readSetEnd();
                  }
                  struct.child_counters_map.put(_key35, _val36);
                }
                iprot.readMapEnd();
              }
              struct.setChild_counters_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EVENT_SEQUENCES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.event_sequences = new java.util.ArrayList<TEventSequence>(_list41.size);
                @org.apache.thrift.annotation.Nullable TEventSequence _elem42;
                for (int _i43 = 0; _i43 < _list41.size; ++_i43)
                {
                  _elem42 = new TEventSequence();
                  _elem42.read(iprot);
                  struct.event_sequences.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setEvent_sequencesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TIME_SERIES_COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.time_series_counters = new java.util.ArrayList<TTimeSeriesCounter>(_list44.size);
                @org.apache.thrift.annotation.Nullable TTimeSeriesCounter _elem45;
                for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                {
                  _elem45 = new TTimeSeriesCounter();
                  _elem45.read(iprot);
                  struct.time_series_counters.add(_elem45);
                }
                iprot.readListEnd();
              }
              struct.setTime_series_countersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUMMARY_STATS_COUNTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list47 = iprot.readListBegin();
                struct.summary_stats_counters = new java.util.ArrayList<TSummaryStatsCounter>(_list47.size);
                @org.apache.thrift.annotation.Nullable TSummaryStatsCounter _elem48;
                for (int _i49 = 0; _i49 < _list47.size; ++_i49)
                {
                  _elem48 = new TSummaryStatsCounter();
                  _elem48.read(iprot);
                  struct.summary_stats_counters.add(_elem48);
                }
                iprot.readListEnd();
              }
              struct.setSummary_stats_countersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NODE_METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.node_metadata = new TRuntimeProfileNodeMetadata();
              struct.node_metadata.read(iprot);
              struct.setNode_metadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNum_children()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'num_children' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMetadata()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'metadata' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetIndent()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'indent' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TRuntimeProfileNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_CHILDREN_FIELD_DESC);
      oprot.writeI32(struct.num_children);
      oprot.writeFieldEnd();
      if (struct.counters != null) {
        oprot.writeFieldBegin(COUNTERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.counters.size()));
          for (TCounter _iter50 : struct.counters)
          {
            _iter50.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(METADATA_FIELD_DESC);
      oprot.writeI64(struct.metadata);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDENT_FIELD_DESC);
      oprot.writeBool(struct.indent);
      oprot.writeFieldEnd();
      if (struct.info_strings != null) {
        oprot.writeFieldBegin(INFO_STRINGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.info_strings.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter51 : struct.info_strings.entrySet())
          {
            oprot.writeString(_iter51.getKey());
            oprot.writeString(_iter51.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.info_strings_display_order != null) {
        oprot.writeFieldBegin(INFO_STRINGS_DISPLAY_ORDER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.info_strings_display_order.size()));
          for (java.lang.String _iter52 : struct.info_strings_display_order)
          {
            oprot.writeString(_iter52);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.child_counters_map != null) {
        oprot.writeFieldBegin(CHILD_COUNTERS_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, struct.child_counters_map.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.Set<java.lang.String>> _iter53 : struct.child_counters_map.entrySet())
          {
            oprot.writeString(_iter53.getKey());
            {
              oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, _iter53.getValue().size()));
              for (java.lang.String _iter54 : _iter53.getValue())
              {
                oprot.writeString(_iter54);
              }
              oprot.writeSetEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.event_sequences != null) {
        if (struct.isSetEvent_sequences()) {
          oprot.writeFieldBegin(EVENT_SEQUENCES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.event_sequences.size()));
            for (TEventSequence _iter55 : struct.event_sequences)
            {
              _iter55.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.time_series_counters != null) {
        if (struct.isSetTime_series_counters()) {
          oprot.writeFieldBegin(TIME_SERIES_COUNTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.time_series_counters.size()));
            for (TTimeSeriesCounter _iter56 : struct.time_series_counters)
            {
              _iter56.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.summary_stats_counters != null) {
        if (struct.isSetSummary_stats_counters()) {
          oprot.writeFieldBegin(SUMMARY_STATS_COUNTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.summary_stats_counters.size()));
            for (TSummaryStatsCounter _iter57 : struct.summary_stats_counters)
            {
              _iter57.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.node_metadata != null) {
        if (struct.isSetNode_metadata()) {
          oprot.writeFieldBegin(NODE_METADATA_FIELD_DESC);
          struct.node_metadata.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TRuntimeProfileNodeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TRuntimeProfileNodeTupleScheme getScheme() {
      return new TRuntimeProfileNodeTupleScheme();
    }
  }

  private static class TRuntimeProfileNodeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TRuntimeProfileNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TRuntimeProfileNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeI32(struct.num_children);
      {
        oprot.writeI32(struct.counters.size());
        for (TCounter _iter58 : struct.counters)
        {
          _iter58.write(oprot);
        }
      }
      oprot.writeI64(struct.metadata);
      oprot.writeBool(struct.indent);
      {
        oprot.writeI32(struct.info_strings.size());
        for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter59 : struct.info_strings.entrySet())
        {
          oprot.writeString(_iter59.getKey());
          oprot.writeString(_iter59.getValue());
        }
      }
      {
        oprot.writeI32(struct.info_strings_display_order.size());
        for (java.lang.String _iter60 : struct.info_strings_display_order)
        {
          oprot.writeString(_iter60);
        }
      }
      {
        oprot.writeI32(struct.child_counters_map.size());
        for (java.util.Map.Entry<java.lang.String, java.util.Set<java.lang.String>> _iter61 : struct.child_counters_map.entrySet())
        {
          oprot.writeString(_iter61.getKey());
          {
            oprot.writeI32(_iter61.getValue().size());
            for (java.lang.String _iter62 : _iter61.getValue())
            {
              oprot.writeString(_iter62);
            }
          }
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEvent_sequences()) {
        optionals.set(0);
      }
      if (struct.isSetTime_series_counters()) {
        optionals.set(1);
      }
      if (struct.isSetSummary_stats_counters()) {
        optionals.set(2);
      }
      if (struct.isSetNode_metadata()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEvent_sequences()) {
        {
          oprot.writeI32(struct.event_sequences.size());
          for (TEventSequence _iter63 : struct.event_sequences)
          {
            _iter63.write(oprot);
          }
        }
      }
      if (struct.isSetTime_series_counters()) {
        {
          oprot.writeI32(struct.time_series_counters.size());
          for (TTimeSeriesCounter _iter64 : struct.time_series_counters)
          {
            _iter64.write(oprot);
          }
        }
      }
      if (struct.isSetSummary_stats_counters()) {
        {
          oprot.writeI32(struct.summary_stats_counters.size());
          for (TSummaryStatsCounter _iter65 : struct.summary_stats_counters)
          {
            _iter65.write(oprot);
          }
        }
      }
      if (struct.isSetNode_metadata()) {
        struct.node_metadata.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TRuntimeProfileNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.num_children = iprot.readI32();
      struct.setNum_childrenIsSet(true);
      {
        org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.counters = new java.util.ArrayList<TCounter>(_list66.size);
        @org.apache.thrift.annotation.Nullable TCounter _elem67;
        for (int _i68 = 0; _i68 < _list66.size; ++_i68)
        {
          _elem67 = new TCounter();
          _elem67.read(iprot);
          struct.counters.add(_elem67);
        }
      }
      struct.setCountersIsSet(true);
      struct.metadata = iprot.readI64();
      struct.setMetadataIsSet(true);
      struct.indent = iprot.readBool();
      struct.setIndentIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map69 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.info_strings = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map69.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key70;
        @org.apache.thrift.annotation.Nullable java.lang.String _val71;
        for (int _i72 = 0; _i72 < _map69.size; ++_i72)
        {
          _key70 = iprot.readString();
          _val71 = iprot.readString();
          struct.info_strings.put(_key70, _val71);
        }
      }
      struct.setInfo_stringsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.info_strings_display_order = new java.util.ArrayList<java.lang.String>(_list73.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _elem74;
        for (int _i75 = 0; _i75 < _list73.size; ++_i75)
        {
          _elem74 = iprot.readString();
          struct.info_strings_display_order.add(_elem74);
        }
      }
      struct.setInfo_strings_display_orderIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.SET, iprot.readI32());
        struct.child_counters_map = new java.util.HashMap<java.lang.String,java.util.Set<java.lang.String>>(2*_map76.size);
        @org.apache.thrift.annotation.Nullable java.lang.String _key77;
        @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.String> _val78;
        for (int _i79 = 0; _i79 < _map76.size; ++_i79)
        {
          _key77 = iprot.readString();
          {
            org.apache.thrift.protocol.TSet _set80 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            _val78 = new java.util.HashSet<java.lang.String>(2*_set80.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem81;
            for (int _i82 = 0; _i82 < _set80.size; ++_i82)
            {
              _elem81 = iprot.readString();
              _val78.add(_elem81);
            }
          }
          struct.child_counters_map.put(_key77, _val78);
        }
      }
      struct.setChild_counters_mapIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.event_sequences = new java.util.ArrayList<TEventSequence>(_list83.size);
          @org.apache.thrift.annotation.Nullable TEventSequence _elem84;
          for (int _i85 = 0; _i85 < _list83.size; ++_i85)
          {
            _elem84 = new TEventSequence();
            _elem84.read(iprot);
            struct.event_sequences.add(_elem84);
          }
        }
        struct.setEvent_sequencesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list86 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.time_series_counters = new java.util.ArrayList<TTimeSeriesCounter>(_list86.size);
          @org.apache.thrift.annotation.Nullable TTimeSeriesCounter _elem87;
          for (int _i88 = 0; _i88 < _list86.size; ++_i88)
          {
            _elem87 = new TTimeSeriesCounter();
            _elem87.read(iprot);
            struct.time_series_counters.add(_elem87);
          }
        }
        struct.setTime_series_countersIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.summary_stats_counters = new java.util.ArrayList<TSummaryStatsCounter>(_list89.size);
          @org.apache.thrift.annotation.Nullable TSummaryStatsCounter _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = new TSummaryStatsCounter();
            _elem90.read(iprot);
            struct.summary_stats_counters.add(_elem90);
          }
        }
        struct.setSummary_stats_countersIsSet(true);
      }
      if (incoming.get(3)) {
        struct.node_metadata = new TRuntimeProfileNodeMetadata();
        struct.node_metadata.read(iprot);
        struct.setNode_metadataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

