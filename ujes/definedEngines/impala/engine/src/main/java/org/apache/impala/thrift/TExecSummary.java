/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-09-12")
public class TExecSummary implements org.apache.thrift.TBase<TExecSummary, TExecSummary._Fields>, java.io.Serializable, Cloneable, Comparable<TExecSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TExecSummary");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("nodes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField EXCH_TO_SENDER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("exch_to_sender_map", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField ERROR_LOGS_FIELD_DESC = new org.apache.thrift.protocol.TField("error_logs", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField PROGRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("progress", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField IS_QUEUED_FIELD_DESC = new org.apache.thrift.protocol.TField("is_queued", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField QUEUED_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("queued_reason", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TExecSummaryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TExecSummaryTupleSchemeFactory();

  /**
   * 
   * @see TExecState
   */
  public @org.apache.thrift.annotation.Nullable TExecState state; // required
  public @org.apache.thrift.annotation.Nullable org.apache.impala.thrift.TStatus status; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<TPlanNodeExecSummary> nodes; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> exch_to_sender_map; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> error_logs; // optional
  public @org.apache.thrift.annotation.Nullable TExecProgress progress; // optional
  public boolean is_queued; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String queued_reason; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TExecState
     */
    STATE((short)1, "state"),
    STATUS((short)2, "status"),
    NODES((short)3, "nodes"),
    EXCH_TO_SENDER_MAP((short)4, "exch_to_sender_map"),
    ERROR_LOGS((short)5, "error_logs"),
    PROGRESS((short)6, "progress"),
    IS_QUEUED((short)7, "is_queued"),
    QUEUED_REASON((short)8, "queued_reason");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // STATUS
          return STATUS;
        case 3: // NODES
          return NODES;
        case 4: // EXCH_TO_SENDER_MAP
          return EXCH_TO_SENDER_MAP;
        case 5: // ERROR_LOGS
          return ERROR_LOGS;
        case 6: // PROGRESS
          return PROGRESS;
        case 7: // IS_QUEUED
          return IS_QUEUED;
        case 8: // QUEUED_REASON
          return QUEUED_REASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IS_QUEUED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATUS,_Fields.NODES,_Fields.EXCH_TO_SENDER_MAP,_Fields.ERROR_LOGS,_Fields.PROGRESS,_Fields.IS_QUEUED,_Fields.QUEUED_REASON};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TExecState.class)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.apache.impala.thrift.TStatus.class)));
    tmpMap.put(_Fields.NODES, new org.apache.thrift.meta_data.FieldMetaData("nodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPlanNodeExecSummary.class))));
    tmpMap.put(_Fields.EXCH_TO_SENDER_MAP, new org.apache.thrift.meta_data.FieldMetaData("exch_to_sender_map", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ERROR_LOGS, new org.apache.thrift.meta_data.FieldMetaData("error_logs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PROGRESS, new org.apache.thrift.meta_data.FieldMetaData("progress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TExecProgress.class)));
    tmpMap.put(_Fields.IS_QUEUED, new org.apache.thrift.meta_data.FieldMetaData("is_queued", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.QUEUED_REASON, new org.apache.thrift.meta_data.FieldMetaData("queued_reason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TExecSummary.class, metaDataMap);
  }

  public TExecSummary() {
  }

  public TExecSummary(
    TExecState state)
  {
    this();
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TExecSummary(TExecSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetStatus()) {
      this.status = new org.apache.impala.thrift.TStatus(other.status);
    }
    if (other.isSetNodes()) {
      java.util.List<TPlanNodeExecSummary> __this__nodes = new java.util.ArrayList<TPlanNodeExecSummary>(other.nodes.size());
      for (TPlanNodeExecSummary other_element : other.nodes) {
        __this__nodes.add(new TPlanNodeExecSummary(other_element));
      }
      this.nodes = __this__nodes;
    }
    if (other.isSetExch_to_sender_map()) {
      java.util.Map<java.lang.Integer,java.lang.Integer> __this__exch_to_sender_map = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other.exch_to_sender_map);
      this.exch_to_sender_map = __this__exch_to_sender_map;
    }
    if (other.isSetError_logs()) {
      java.util.List<java.lang.String> __this__error_logs = new java.util.ArrayList<java.lang.String>(other.error_logs);
      this.error_logs = __this__error_logs;
    }
    if (other.isSetProgress()) {
      this.progress = new TExecProgress(other.progress);
    }
    this.is_queued = other.is_queued;
    if (other.isSetQueued_reason()) {
      this.queued_reason = other.queued_reason;
    }
  }

  public TExecSummary deepCopy() {
    return new TExecSummary(this);
  }

  @Override
  public void clear() {
    this.state = null;
    this.status = null;
    this.nodes = null;
    this.exch_to_sender_map = null;
    this.error_logs = null;
    this.progress = null;
    setIs_queuedIsSet(false);
    this.is_queued = false;
    this.queued_reason = null;
  }

  /**
   * 
   * @see TExecState
   */
  @org.apache.thrift.annotation.Nullable
  public TExecState getState() {
    return this.state;
  }

  /**
   * 
   * @see TExecState
   */
  public TExecSummary setState(@org.apache.thrift.annotation.Nullable TExecState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public org.apache.impala.thrift.TStatus getStatus() {
    return this.status;
  }

  public TExecSummary setStatus(@org.apache.thrift.annotation.Nullable org.apache.impala.thrift.TStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getNodesSize() {
    return (this.nodes == null) ? 0 : this.nodes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<TPlanNodeExecSummary> getNodesIterator() {
    return (this.nodes == null) ? null : this.nodes.iterator();
  }

  public void addToNodes(TPlanNodeExecSummary elem) {
    if (this.nodes == null) {
      this.nodes = new java.util.ArrayList<TPlanNodeExecSummary>();
    }
    this.nodes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<TPlanNodeExecSummary> getNodes() {
    return this.nodes;
  }

  public TExecSummary setNodes(@org.apache.thrift.annotation.Nullable java.util.List<TPlanNodeExecSummary> nodes) {
    this.nodes = nodes;
    return this;
  }

  public void unsetNodes() {
    this.nodes = null;
  }

  /** Returns true if field nodes is set (has been assigned a value) and false otherwise */
  public boolean isSetNodes() {
    return this.nodes != null;
  }

  public void setNodesIsSet(boolean value) {
    if (!value) {
      this.nodes = null;
    }
  }

  public int getExch_to_sender_mapSize() {
    return (this.exch_to_sender_map == null) ? 0 : this.exch_to_sender_map.size();
  }

  public void putToExch_to_sender_map(int key, int val) {
    if (this.exch_to_sender_map == null) {
      this.exch_to_sender_map = new java.util.HashMap<java.lang.Integer,java.lang.Integer>();
    }
    this.exch_to_sender_map.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Integer> getExch_to_sender_map() {
    return this.exch_to_sender_map;
  }

  public TExecSummary setExch_to_sender_map(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> exch_to_sender_map) {
    this.exch_to_sender_map = exch_to_sender_map;
    return this;
  }

  public void unsetExch_to_sender_map() {
    this.exch_to_sender_map = null;
  }

  /** Returns true if field exch_to_sender_map is set (has been assigned a value) and false otherwise */
  public boolean isSetExch_to_sender_map() {
    return this.exch_to_sender_map != null;
  }

  public void setExch_to_sender_mapIsSet(boolean value) {
    if (!value) {
      this.exch_to_sender_map = null;
    }
  }

  public int getError_logsSize() {
    return (this.error_logs == null) ? 0 : this.error_logs.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getError_logsIterator() {
    return (this.error_logs == null) ? null : this.error_logs.iterator();
  }

  public void addToError_logs(java.lang.String elem) {
    if (this.error_logs == null) {
      this.error_logs = new java.util.ArrayList<java.lang.String>();
    }
    this.error_logs.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getError_logs() {
    return this.error_logs;
  }

  public TExecSummary setError_logs(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> error_logs) {
    this.error_logs = error_logs;
    return this;
  }

  public void unsetError_logs() {
    this.error_logs = null;
  }

  /** Returns true if field error_logs is set (has been assigned a value) and false otherwise */
  public boolean isSetError_logs() {
    return this.error_logs != null;
  }

  public void setError_logsIsSet(boolean value) {
    if (!value) {
      this.error_logs = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public TExecProgress getProgress() {
    return this.progress;
  }

  public TExecSummary setProgress(@org.apache.thrift.annotation.Nullable TExecProgress progress) {
    this.progress = progress;
    return this;
  }

  public void unsetProgress() {
    this.progress = null;
  }

  /** Returns true if field progress is set (has been assigned a value) and false otherwise */
  public boolean isSetProgress() {
    return this.progress != null;
  }

  public void setProgressIsSet(boolean value) {
    if (!value) {
      this.progress = null;
    }
  }

  public boolean isIs_queued() {
    return this.is_queued;
  }

  public TExecSummary setIs_queued(boolean is_queued) {
    this.is_queued = is_queued;
    setIs_queuedIsSet(true);
    return this;
  }

  public void unsetIs_queued() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IS_QUEUED_ISSET_ID);
  }

  /** Returns true if field is_queued is set (has been assigned a value) and false otherwise */
  public boolean isSetIs_queued() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IS_QUEUED_ISSET_ID);
  }

  public void setIs_queuedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IS_QUEUED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getQueued_reason() {
    return this.queued_reason;
  }

  public TExecSummary setQueued_reason(@org.apache.thrift.annotation.Nullable java.lang.String queued_reason) {
    this.queued_reason = queued_reason;
    return this;
  }

  public void unsetQueued_reason() {
    this.queued_reason = null;
  }

  /** Returns true if field queued_reason is set (has been assigned a value) and false otherwise */
  public boolean isSetQueued_reason() {
    return this.queued_reason != null;
  }

  public void setQueued_reasonIsSet(boolean value) {
    if (!value) {
      this.queued_reason = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((TExecState)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((org.apache.impala.thrift.TStatus)value);
      }
      break;

    case NODES:
      if (value == null) {
        unsetNodes();
      } else {
        setNodes((java.util.List<TPlanNodeExecSummary>)value);
      }
      break;

    case EXCH_TO_SENDER_MAP:
      if (value == null) {
        unsetExch_to_sender_map();
      } else {
        setExch_to_sender_map((java.util.Map<java.lang.Integer,java.lang.Integer>)value);
      }
      break;

    case ERROR_LOGS:
      if (value == null) {
        unsetError_logs();
      } else {
        setError_logs((java.util.List<java.lang.String>)value);
      }
      break;

    case PROGRESS:
      if (value == null) {
        unsetProgress();
      } else {
        setProgress((TExecProgress)value);
      }
      break;

    case IS_QUEUED:
      if (value == null) {
        unsetIs_queued();
      } else {
        setIs_queued((java.lang.Boolean)value);
      }
      break;

    case QUEUED_REASON:
      if (value == null) {
        unsetQueued_reason();
      } else {
        setQueued_reason((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case STATUS:
      return getStatus();

    case NODES:
      return getNodes();

    case EXCH_TO_SENDER_MAP:
      return getExch_to_sender_map();

    case ERROR_LOGS:
      return getError_logs();

    case PROGRESS:
      return getProgress();

    case IS_QUEUED:
      return isIs_queued();

    case QUEUED_REASON:
      return getQueued_reason();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case STATUS:
      return isSetStatus();
    case NODES:
      return isSetNodes();
    case EXCH_TO_SENDER_MAP:
      return isSetExch_to_sender_map();
    case ERROR_LOGS:
      return isSetError_logs();
    case PROGRESS:
      return isSetProgress();
    case IS_QUEUED:
      return isSetIs_queued();
    case QUEUED_REASON:
      return isSetQueued_reason();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TExecSummary)
      return this.equals((TExecSummary)that);
    return false;
  }

  public boolean equals(TExecSummary that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_nodes = true && this.isSetNodes();
    boolean that_present_nodes = true && that.isSetNodes();
    if (this_present_nodes || that_present_nodes) {
      if (!(this_present_nodes && that_present_nodes))
        return false;
      if (!this.nodes.equals(that.nodes))
        return false;
    }

    boolean this_present_exch_to_sender_map = true && this.isSetExch_to_sender_map();
    boolean that_present_exch_to_sender_map = true && that.isSetExch_to_sender_map();
    if (this_present_exch_to_sender_map || that_present_exch_to_sender_map) {
      if (!(this_present_exch_to_sender_map && that_present_exch_to_sender_map))
        return false;
      if (!this.exch_to_sender_map.equals(that.exch_to_sender_map))
        return false;
    }

    boolean this_present_error_logs = true && this.isSetError_logs();
    boolean that_present_error_logs = true && that.isSetError_logs();
    if (this_present_error_logs || that_present_error_logs) {
      if (!(this_present_error_logs && that_present_error_logs))
        return false;
      if (!this.error_logs.equals(that.error_logs))
        return false;
    }

    boolean this_present_progress = true && this.isSetProgress();
    boolean that_present_progress = true && that.isSetProgress();
    if (this_present_progress || that_present_progress) {
      if (!(this_present_progress && that_present_progress))
        return false;
      if (!this.progress.equals(that.progress))
        return false;
    }

    boolean this_present_is_queued = true && this.isSetIs_queued();
    boolean that_present_is_queued = true && that.isSetIs_queued();
    if (this_present_is_queued || that_present_is_queued) {
      if (!(this_present_is_queued && that_present_is_queued))
        return false;
      if (this.is_queued != that.is_queued)
        return false;
    }

    boolean this_present_queued_reason = true && this.isSetQueued_reason();
    boolean that_present_queued_reason = true && that.isSetQueued_reason();
    if (this_present_queued_reason || that_present_queued_reason) {
      if (!(this_present_queued_reason && that_present_queued_reason))
        return false;
      if (!this.queued_reason.equals(that.queued_reason))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.getValue();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetNodes()) ? 131071 : 524287);
    if (isSetNodes())
      hashCode = hashCode * 8191 + nodes.hashCode();

    hashCode = hashCode * 8191 + ((isSetExch_to_sender_map()) ? 131071 : 524287);
    if (isSetExch_to_sender_map())
      hashCode = hashCode * 8191 + exch_to_sender_map.hashCode();

    hashCode = hashCode * 8191 + ((isSetError_logs()) ? 131071 : 524287);
    if (isSetError_logs())
      hashCode = hashCode * 8191 + error_logs.hashCode();

    hashCode = hashCode * 8191 + ((isSetProgress()) ? 131071 : 524287);
    if (isSetProgress())
      hashCode = hashCode * 8191 + progress.hashCode();

    hashCode = hashCode * 8191 + ((isSetIs_queued()) ? 131071 : 524287);
    if (isSetIs_queued())
      hashCode = hashCode * 8191 + ((is_queued) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetQueued_reason()) ? 131071 : 524287);
    if (isSetQueued_reason())
      hashCode = hashCode * 8191 + queued_reason.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TExecSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNodes()).compareTo(other.isSetNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodes, other.nodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExch_to_sender_map()).compareTo(other.isSetExch_to_sender_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExch_to_sender_map()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exch_to_sender_map, other.exch_to_sender_map);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetError_logs()).compareTo(other.isSetError_logs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError_logs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error_logs, other.error_logs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProgress()).compareTo(other.isSetProgress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProgress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.progress, other.progress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIs_queued()).compareTo(other.isSetIs_queued());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIs_queued()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.is_queued, other.is_queued);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetQueued_reason()).compareTo(other.isSetQueued_reason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueued_reason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queued_reason, other.queued_reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TExecSummary(");
    boolean first = true;

    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetNodes()) {
      if (!first) sb.append(", ");
      sb.append("nodes:");
      if (this.nodes == null) {
        sb.append("null");
      } else {
        sb.append(this.nodes);
      }
      first = false;
    }
    if (isSetExch_to_sender_map()) {
      if (!first) sb.append(", ");
      sb.append("exch_to_sender_map:");
      if (this.exch_to_sender_map == null) {
        sb.append("null");
      } else {
        sb.append(this.exch_to_sender_map);
      }
      first = false;
    }
    if (isSetError_logs()) {
      if (!first) sb.append(", ");
      sb.append("error_logs:");
      if (this.error_logs == null) {
        sb.append("null");
      } else {
        sb.append(this.error_logs);
      }
      first = false;
    }
    if (isSetProgress()) {
      if (!first) sb.append(", ");
      sb.append("progress:");
      if (this.progress == null) {
        sb.append("null");
      } else {
        sb.append(this.progress);
      }
      first = false;
    }
    if (isSetIs_queued()) {
      if (!first) sb.append(", ");
      sb.append("is_queued:");
      sb.append(this.is_queued);
      first = false;
    }
    if (isSetQueued_reason()) {
      if (!first) sb.append(", ");
      sb.append("queued_reason:");
      if (this.queued_reason == null) {
        sb.append("null");
      } else {
        sb.append(this.queued_reason);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (state == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
    if (progress != null) {
      progress.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TExecSummaryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TExecSummaryStandardScheme getScheme() {
      return new TExecSummaryStandardScheme();
    }
  }

  private static class TExecSummaryStandardScheme extends org.apache.thrift.scheme.StandardScheme<TExecSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TExecSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = org.apache.impala.thrift.TExecState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new org.apache.impala.thrift.TStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.nodes = new java.util.ArrayList<TPlanNodeExecSummary>(_list8.size);
                @org.apache.thrift.annotation.Nullable TPlanNodeExecSummary _elem9;
                for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                {
                  _elem9 = new TPlanNodeExecSummary();
                  _elem9.read(iprot);
                  struct.nodes.add(_elem9);
                }
                iprot.readListEnd();
              }
              struct.setNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXCH_TO_SENDER_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map11 = iprot.readMapBegin();
                struct.exch_to_sender_map = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map11.size);
                int _key12;
                int _val13;
                for (int _i14 = 0; _i14 < _map11.size; ++_i14)
                {
                  _key12 = iprot.readI32();
                  _val13 = iprot.readI32();
                  struct.exch_to_sender_map.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setExch_to_sender_mapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ERROR_LOGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                struct.error_logs = new java.util.ArrayList<java.lang.String>(_list15.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem16;
                for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                {
                  _elem16 = iprot.readString();
                  struct.error_logs.add(_elem16);
                }
                iprot.readListEnd();
              }
              struct.setError_logsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PROGRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.progress = new TExecProgress();
              struct.progress.read(iprot);
              struct.setProgressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_QUEUED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.is_queued = iprot.readBool();
              struct.setIs_queuedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // QUEUED_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queued_reason = iprot.readString();
              struct.setQueued_reasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TExecSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          struct.status.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nodes != null) {
        if (struct.isSetNodes()) {
          oprot.writeFieldBegin(NODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nodes.size()));
            for (TPlanNodeExecSummary _iter18 : struct.nodes)
            {
              _iter18.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.exch_to_sender_map != null) {
        if (struct.isSetExch_to_sender_map()) {
          oprot.writeFieldBegin(EXCH_TO_SENDER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, struct.exch_to_sender_map.size()));
            for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter19 : struct.exch_to_sender_map.entrySet())
            {
              oprot.writeI32(_iter19.getKey());
              oprot.writeI32(_iter19.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.error_logs != null) {
        if (struct.isSetError_logs()) {
          oprot.writeFieldBegin(ERROR_LOGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.error_logs.size()));
            for (java.lang.String _iter20 : struct.error_logs)
            {
              oprot.writeString(_iter20);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.progress != null) {
        if (struct.isSetProgress()) {
          oprot.writeFieldBegin(PROGRESS_FIELD_DESC);
          struct.progress.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIs_queued()) {
        oprot.writeFieldBegin(IS_QUEUED_FIELD_DESC);
        oprot.writeBool(struct.is_queued);
        oprot.writeFieldEnd();
      }
      if (struct.queued_reason != null) {
        if (struct.isSetQueued_reason()) {
          oprot.writeFieldBegin(QUEUED_REASON_FIELD_DESC);
          oprot.writeString(struct.queued_reason);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TExecSummaryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TExecSummaryTupleScheme getScheme() {
      return new TExecSummaryTupleScheme();
    }
  }

  private static class TExecSummaryTupleScheme extends org.apache.thrift.scheme.TupleScheme<TExecSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TExecSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.state.getValue());
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetNodes()) {
        optionals.set(1);
      }
      if (struct.isSetExch_to_sender_map()) {
        optionals.set(2);
      }
      if (struct.isSetError_logs()) {
        optionals.set(3);
      }
      if (struct.isSetProgress()) {
        optionals.set(4);
      }
      if (struct.isSetIs_queued()) {
        optionals.set(5);
      }
      if (struct.isSetQueued_reason()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
      if (struct.isSetNodes()) {
        {
          oprot.writeI32(struct.nodes.size());
          for (TPlanNodeExecSummary _iter21 : struct.nodes)
          {
            _iter21.write(oprot);
          }
        }
      }
      if (struct.isSetExch_to_sender_map()) {
        {
          oprot.writeI32(struct.exch_to_sender_map.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter22 : struct.exch_to_sender_map.entrySet())
          {
            oprot.writeI32(_iter22.getKey());
            oprot.writeI32(_iter22.getValue());
          }
        }
      }
      if (struct.isSetError_logs()) {
        {
          oprot.writeI32(struct.error_logs.size());
          for (java.lang.String _iter23 : struct.error_logs)
          {
            oprot.writeString(_iter23);
          }
        }
      }
      if (struct.isSetProgress()) {
        struct.progress.write(oprot);
      }
      if (struct.isSetIs_queued()) {
        oprot.writeBool(struct.is_queued);
      }
      if (struct.isSetQueued_reason()) {
        oprot.writeString(struct.queued_reason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TExecSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.state = org.apache.impala.thrift.TExecState.findByValue(iprot.readI32());
      struct.setStateIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.status = new org.apache.impala.thrift.TStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list24 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nodes = new java.util.ArrayList<TPlanNodeExecSummary>(_list24.size);
          @org.apache.thrift.annotation.Nullable TPlanNodeExecSummary _elem25;
          for (int _i26 = 0; _i26 < _list24.size; ++_i26)
          {
            _elem25 = new TPlanNodeExecSummary();
            _elem25.read(iprot);
            struct.nodes.add(_elem25);
          }
        }
        struct.setNodesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.exch_to_sender_map = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map27.size);
          int _key28;
          int _val29;
          for (int _i30 = 0; _i30 < _map27.size; ++_i30)
          {
            _key28 = iprot.readI32();
            _val29 = iprot.readI32();
            struct.exch_to_sender_map.put(_key28, _val29);
          }
        }
        struct.setExch_to_sender_mapIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.error_logs = new java.util.ArrayList<java.lang.String>(_list31.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readString();
            struct.error_logs.add(_elem32);
          }
        }
        struct.setError_logsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.progress = new TExecProgress();
        struct.progress.read(iprot);
        struct.setProgressIsSet(true);
      }
      if (incoming.get(5)) {
        struct.is_queued = iprot.readBool();
        struct.setIs_queuedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.queued_reason = iprot.readString();
        struct.setQueued_reasonIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

