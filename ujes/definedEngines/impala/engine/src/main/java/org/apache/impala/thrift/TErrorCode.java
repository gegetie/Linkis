/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;


@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-18")
public enum TErrorCode implements org.apache.thrift.TEnum {
  OK(0),
  UNUSED(1),
  GENERAL(2),
  CANCELLED(3),
  ANALYSIS_ERROR(4),
  NOT_IMPLEMENTED_ERROR(5),
  RUNTIME_ERROR(6),
  MEM_LIMIT_EXCEEDED(7),
  INTERNAL_ERROR(8),
  RECOVERABLE_ERROR(9),
  PARQUET_MULTIPLE_BLOCKS(10),
  PARQUET_COLUMN_METADATA_INVALID(11),
  PARQUET_HEADER_PAGE_SIZE_EXCEEDED(12),
  PARQUET_HEADER_EOF(13),
  PARQUET_GROUP_ROW_COUNT_ERROR(14),
  PARQUET_GROUP_ROW_COUNT_OVERFLOW(15),
  PARQUET_MISSING_PRECISION(16),
  PARQUET_WRONG_PRECISION(17),
  PARQUET_BAD_CONVERTED_TYPE(18),
  PARQUET_INCOMPATIBLE_DECIMAL(19),
  SEQUENCE_SCANNER_PARSE_ERROR(20),
  SNAPPY_DECOMPRESS_INVALID_BLOCK_SIZE(21),
  SNAPPY_DECOMPRESS_INVALID_COMPRESSED_LENGTH(22),
  SNAPPY_DECOMPRESS_UNCOMPRESSED_LENGTH_FAILED(23),
  SNAPPY_DECOMPRESS_RAW_UNCOMPRESS_FAILED(24),
  SNAPPY_DECOMPRESS_DECOMPRESS_SIZE_INCORRECT(25),
  FRAGMENT_EXECUTOR(26),
  PARTITIONED_HASH_JOIN_MAX_PARTITION_DEPTH(27),
  PARTITIONED_AGG_MAX_PARTITION_DEPTH(28),
  MISSING_BUILTIN(29),
  RPC_GENERAL_ERROR(30),
  RPC_RECV_TIMEOUT(31),
  UDF_VERIFY_FAILED(32),
  PARQUET_CORRUPT_RLE_BYTES(33),
  AVRO_DECIMAL_RESOLUTION_ERROR(34),
  AVRO_DECIMAL_METADATA_MISMATCH(35),
  AVRO_SCHEMA_RESOLUTION_ERROR(36),
  AVRO_SCHEMA_METADATA_MISMATCH(37),
  AVRO_UNSUPPORTED_DEFAULT_VALUE(38),
  AVRO_MISSING_FIELD(39),
  AVRO_MISSING_DEFAULT(40),
  AVRO_NULLABILITY_MISMATCH(41),
  AVRO_NOT_A_RECORD(42),
  PARQUET_DEF_LEVEL_ERROR(43),
  PARQUET_NUM_COL_VALS_ERROR(44),
  PARQUET_DICT_DECODE_FAILURE(45),
  SSL_PASSWORD_CMD_FAILED(46),
  SSL_CERTIFICATE_PATH_BLANK(47),
  SSL_PRIVATE_KEY_PATH_BLANK(48),
  SSL_CERTIFICATE_NOT_FOUND(49),
  SSL_PRIVATE_KEY_NOT_FOUND(50),
  SSL_SOCKET_CREATION_FAILED(51),
  MEM_ALLOC_FAILED(52),
  PARQUET_REP_LEVEL_ERROR(53),
  PARQUET_UNRECOGNIZED_SCHEMA(54),
  COLLECTION_ALLOC_FAILED(55),
  TMP_DEVICE_BLACKLISTED(56),
  TMP_FILE_BLACKLISTED(57),
  RPC_CLIENT_CONNECT_FAILURE(58),
  STALE_METADATA_FILE_TOO_SHORT(59),
  PARQUET_BAD_VERSION_NUMBER(60),
  SCANNER_INCOMPLETE_READ(61),
  SCANNER_INVALID_READ(62),
  AVRO_BAD_VERSION_HEADER(63),
  UDF_MEM_LIMIT_EXCEEDED(64),
  UNUSED_65(65),
  COMPRESSED_FILE_MULTIPLE_BLOCKS(66),
  COMPRESSED_FILE_BLOCK_CORRUPTED(67),
  COMPRESSED_FILE_DECOMPRESSOR_ERROR(68),
  COMPRESSED_FILE_DECOMPRESSOR_NO_PROGRESS(69),
  COMPRESSED_FILE_TRUNCATED(70),
  DATASTREAM_SENDER_TIMEOUT(71),
  KUDU_IMPALA_TYPE_MISSING(72),
  IMPALA_KUDU_TYPE_MISSING(73),
  KUDU_NOT_SUPPORTED_ON_OS(74),
  KUDU_NOT_ENABLED(75),
  PARTITIONED_HASH_JOIN_REPARTITION_FAILS(76),
  UNUSED_77(77),
  AVRO_TRUNCATED_BLOCK(78),
  AVRO_INVALID_UNION(79),
  AVRO_INVALID_BOOLEAN(80),
  AVRO_INVALID_LENGTH(81),
  SCANNER_INVALID_INT(82),
  AVRO_INVALID_RECORD_COUNT(83),
  AVRO_INVALID_COMPRESSED_SIZE(84),
  AVRO_INVALID_METADATA_COUNT(85),
  SCANNER_STRING_LENGTH_OVERFLOW(86),
  PARQUET_CORRUPT_PLAIN_VALUE(87),
  PARQUET_CORRUPT_DICTIONARY(88),
  TEXT_PARSER_TRUNCATED_COLUMN(89),
  SCRATCH_LIMIT_EXCEEDED(90),
  BUFFER_ALLOCATION_FAILED(91),
  PARQUET_ZERO_ROWS_IN_NON_EMPTY_FILE(92),
  NO_REGISTERED_BACKENDS(93),
  KUDU_KEY_ALREADY_PRESENT(94),
  KUDU_NOT_FOUND(95),
  KUDU_SESSION_ERROR(96),
  AVRO_UNSUPPORTED_TYPE(97),
  AVRO_INVALID_DECIMAL(98),
  KUDU_NULL_CONSTRAINT_VIOLATION(99),
  PARQUET_TIMESTAMP_OUT_OF_RANGE(100),
  SCRATCH_ALLOCATION_FAILED(101),
  SCRATCH_READ_TRUNCATED(102),
  KUDU_TIMESTAMP_OUT_OF_RANGE(103),
  MAX_ROW_SIZE(104),
  IR_VERIFY_FAILED(105),
  MINIMUM_RESERVATION_UNAVAILABLE(106),
  ADMISSION_REJECTED(107),
  ADMISSION_TIMED_OUT(108),
  THREAD_CREATION_FAILED(109),
  DISK_IO_ERROR(110),
  DATASTREAM_RECVR_CLOSED(111),
  BAD_PRINCIPAL_FORMAT(112),
  LZ4_COMPRESSION_INPUT_TOO_LARGE(113),
  SASL_APP_NAME_MISMATCH(114),
  PARQUET_BIT_PACKED_LEVELS(115),
  ROW_BATCH_TOO_LARGE(116),
  LIB_VERSION_MISMATCH(117),
  SCRATCH_READ_VERIFY_FAILED(118),
  CANCELLED_INTERNALLY(119),
  SERVER_SHUTTING_DOWN(120),
  PARQUET_TIMESTAMP_INVALID_TIME_OF_DAY(121),
  PARQUET_CORRUPT_BOOL_VALUE(122),
  THREAD_POOL_SUBMIT_FAILED(123),
  THREAD_POOL_TASK_TIMED_OUT(124),
  UNREACHABLE_IMPALADS(125),
  INACTIVE_SESSION_EXPIRED(126),
  INACTIVE_QUERY_EXPIRED(127),
  EXEC_TIME_LIMIT_EXCEEDED(128),
  CPU_LIMIT_EXCEEDED(129),
  SCAN_BYTES_LIMIT_EXCEEDED(130),
  ROWS_PRODUCED_LIMIT_EXCEEDED(131);

  private final int value;

  private TErrorCode(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static TErrorCode findByValue(int value) { 
    switch (value) {
      case 0:
        return OK;
      case 1:
        return UNUSED;
      case 2:
        return GENERAL;
      case 3:
        return CANCELLED;
      case 4:
        return ANALYSIS_ERROR;
      case 5:
        return NOT_IMPLEMENTED_ERROR;
      case 6:
        return RUNTIME_ERROR;
      case 7:
        return MEM_LIMIT_EXCEEDED;
      case 8:
        return INTERNAL_ERROR;
      case 9:
        return RECOVERABLE_ERROR;
      case 10:
        return PARQUET_MULTIPLE_BLOCKS;
      case 11:
        return PARQUET_COLUMN_METADATA_INVALID;
      case 12:
        return PARQUET_HEADER_PAGE_SIZE_EXCEEDED;
      case 13:
        return PARQUET_HEADER_EOF;
      case 14:
        return PARQUET_GROUP_ROW_COUNT_ERROR;
      case 15:
        return PARQUET_GROUP_ROW_COUNT_OVERFLOW;
      case 16:
        return PARQUET_MISSING_PRECISION;
      case 17:
        return PARQUET_WRONG_PRECISION;
      case 18:
        return PARQUET_BAD_CONVERTED_TYPE;
      case 19:
        return PARQUET_INCOMPATIBLE_DECIMAL;
      case 20:
        return SEQUENCE_SCANNER_PARSE_ERROR;
      case 21:
        return SNAPPY_DECOMPRESS_INVALID_BLOCK_SIZE;
      case 22:
        return SNAPPY_DECOMPRESS_INVALID_COMPRESSED_LENGTH;
      case 23:
        return SNAPPY_DECOMPRESS_UNCOMPRESSED_LENGTH_FAILED;
      case 24:
        return SNAPPY_DECOMPRESS_RAW_UNCOMPRESS_FAILED;
      case 25:
        return SNAPPY_DECOMPRESS_DECOMPRESS_SIZE_INCORRECT;
      case 26:
        return FRAGMENT_EXECUTOR;
      case 27:
        return PARTITIONED_HASH_JOIN_MAX_PARTITION_DEPTH;
      case 28:
        return PARTITIONED_AGG_MAX_PARTITION_DEPTH;
      case 29:
        return MISSING_BUILTIN;
      case 30:
        return RPC_GENERAL_ERROR;
      case 31:
        return RPC_RECV_TIMEOUT;
      case 32:
        return UDF_VERIFY_FAILED;
      case 33:
        return PARQUET_CORRUPT_RLE_BYTES;
      case 34:
        return AVRO_DECIMAL_RESOLUTION_ERROR;
      case 35:
        return AVRO_DECIMAL_METADATA_MISMATCH;
      case 36:
        return AVRO_SCHEMA_RESOLUTION_ERROR;
      case 37:
        return AVRO_SCHEMA_METADATA_MISMATCH;
      case 38:
        return AVRO_UNSUPPORTED_DEFAULT_VALUE;
      case 39:
        return AVRO_MISSING_FIELD;
      case 40:
        return AVRO_MISSING_DEFAULT;
      case 41:
        return AVRO_NULLABILITY_MISMATCH;
      case 42:
        return AVRO_NOT_A_RECORD;
      case 43:
        return PARQUET_DEF_LEVEL_ERROR;
      case 44:
        return PARQUET_NUM_COL_VALS_ERROR;
      case 45:
        return PARQUET_DICT_DECODE_FAILURE;
      case 46:
        return SSL_PASSWORD_CMD_FAILED;
      case 47:
        return SSL_CERTIFICATE_PATH_BLANK;
      case 48:
        return SSL_PRIVATE_KEY_PATH_BLANK;
      case 49:
        return SSL_CERTIFICATE_NOT_FOUND;
      case 50:
        return SSL_PRIVATE_KEY_NOT_FOUND;
      case 51:
        return SSL_SOCKET_CREATION_FAILED;
      case 52:
        return MEM_ALLOC_FAILED;
      case 53:
        return PARQUET_REP_LEVEL_ERROR;
      case 54:
        return PARQUET_UNRECOGNIZED_SCHEMA;
      case 55:
        return COLLECTION_ALLOC_FAILED;
      case 56:
        return TMP_DEVICE_BLACKLISTED;
      case 57:
        return TMP_FILE_BLACKLISTED;
      case 58:
        return RPC_CLIENT_CONNECT_FAILURE;
      case 59:
        return STALE_METADATA_FILE_TOO_SHORT;
      case 60:
        return PARQUET_BAD_VERSION_NUMBER;
      case 61:
        return SCANNER_INCOMPLETE_READ;
      case 62:
        return SCANNER_INVALID_READ;
      case 63:
        return AVRO_BAD_VERSION_HEADER;
      case 64:
        return UDF_MEM_LIMIT_EXCEEDED;
      case 65:
        return UNUSED_65;
      case 66:
        return COMPRESSED_FILE_MULTIPLE_BLOCKS;
      case 67:
        return COMPRESSED_FILE_BLOCK_CORRUPTED;
      case 68:
        return COMPRESSED_FILE_DECOMPRESSOR_ERROR;
      case 69:
        return COMPRESSED_FILE_DECOMPRESSOR_NO_PROGRESS;
      case 70:
        return COMPRESSED_FILE_TRUNCATED;
      case 71:
        return DATASTREAM_SENDER_TIMEOUT;
      case 72:
        return KUDU_IMPALA_TYPE_MISSING;
      case 73:
        return IMPALA_KUDU_TYPE_MISSING;
      case 74:
        return KUDU_NOT_SUPPORTED_ON_OS;
      case 75:
        return KUDU_NOT_ENABLED;
      case 76:
        return PARTITIONED_HASH_JOIN_REPARTITION_FAILS;
      case 77:
        return UNUSED_77;
      case 78:
        return AVRO_TRUNCATED_BLOCK;
      case 79:
        return AVRO_INVALID_UNION;
      case 80:
        return AVRO_INVALID_BOOLEAN;
      case 81:
        return AVRO_INVALID_LENGTH;
      case 82:
        return SCANNER_INVALID_INT;
      case 83:
        return AVRO_INVALID_RECORD_COUNT;
      case 84:
        return AVRO_INVALID_COMPRESSED_SIZE;
      case 85:
        return AVRO_INVALID_METADATA_COUNT;
      case 86:
        return SCANNER_STRING_LENGTH_OVERFLOW;
      case 87:
        return PARQUET_CORRUPT_PLAIN_VALUE;
      case 88:
        return PARQUET_CORRUPT_DICTIONARY;
      case 89:
        return TEXT_PARSER_TRUNCATED_COLUMN;
      case 90:
        return SCRATCH_LIMIT_EXCEEDED;
      case 91:
        return BUFFER_ALLOCATION_FAILED;
      case 92:
        return PARQUET_ZERO_ROWS_IN_NON_EMPTY_FILE;
      case 93:
        return NO_REGISTERED_BACKENDS;
      case 94:
        return KUDU_KEY_ALREADY_PRESENT;
      case 95:
        return KUDU_NOT_FOUND;
      case 96:
        return KUDU_SESSION_ERROR;
      case 97:
        return AVRO_UNSUPPORTED_TYPE;
      case 98:
        return AVRO_INVALID_DECIMAL;
      case 99:
        return KUDU_NULL_CONSTRAINT_VIOLATION;
      case 100:
        return PARQUET_TIMESTAMP_OUT_OF_RANGE;
      case 101:
        return SCRATCH_ALLOCATION_FAILED;
      case 102:
        return SCRATCH_READ_TRUNCATED;
      case 103:
        return KUDU_TIMESTAMP_OUT_OF_RANGE;
      case 104:
        return MAX_ROW_SIZE;
      case 105:
        return IR_VERIFY_FAILED;
      case 106:
        return MINIMUM_RESERVATION_UNAVAILABLE;
      case 107:
        return ADMISSION_REJECTED;
      case 108:
        return ADMISSION_TIMED_OUT;
      case 109:
        return THREAD_CREATION_FAILED;
      case 110:
        return DISK_IO_ERROR;
      case 111:
        return DATASTREAM_RECVR_CLOSED;
      case 112:
        return BAD_PRINCIPAL_FORMAT;
      case 113:
        return LZ4_COMPRESSION_INPUT_TOO_LARGE;
      case 114:
        return SASL_APP_NAME_MISMATCH;
      case 115:
        return PARQUET_BIT_PACKED_LEVELS;
      case 116:
        return ROW_BATCH_TOO_LARGE;
      case 117:
        return LIB_VERSION_MISMATCH;
      case 118:
        return SCRATCH_READ_VERIFY_FAILED;
      case 119:
        return CANCELLED_INTERNALLY;
      case 120:
        return SERVER_SHUTTING_DOWN;
      case 121:
        return PARQUET_TIMESTAMP_INVALID_TIME_OF_DAY;
      case 122:
        return PARQUET_CORRUPT_BOOL_VALUE;
      case 123:
        return THREAD_POOL_SUBMIT_FAILED;
      case 124:
        return THREAD_POOL_TASK_TIMED_OUT;
      case 125:
        return UNREACHABLE_IMPALADS;
      case 126:
        return INACTIVE_SESSION_EXPIRED;
      case 127:
        return INACTIVE_QUERY_EXPIRED;
      case 128:
        return EXEC_TIME_LIMIT_EXCEEDED;
      case 129:
        return CPU_LIMIT_EXCEEDED;
      case 130:
        return SCAN_BYTES_LIMIT_EXCEEDED;
      case 131:
        return ROWS_PRODUCED_LIMIT_EXCEEDED;
      default:
        return null;
    }
  }
}
