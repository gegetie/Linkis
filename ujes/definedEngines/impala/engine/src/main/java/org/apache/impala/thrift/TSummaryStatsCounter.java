/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.impala.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-12-18")
public class TSummaryStatsCounter implements org.apache.thrift.TBase<TSummaryStatsCounter, TSummaryStatsCounter._Fields>, java.io.Serializable, Cloneable, Comparable<TSummaryStatsCounter> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSummaryStatsCounter");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("sum", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_NUM_VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("total_num_values", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField MIN_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("min_value", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("max_value", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSummaryStatsCounterStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSummaryStatsCounterTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  /**
   * 
   * @see org.apache.impala.thrift.TUnit
   */
  public @org.apache.thrift.annotation.Nullable org.apache.impala.thrift.TUnit unit; // required
  public long sum; // required
  public long total_num_values; // required
  public long min_value; // required
  public long max_value; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    /**
     * 
     * @see org.apache.impala.thrift.TUnit
     */
    UNIT((short)2, "unit"),
    SUM((short)3, "sum"),
    TOTAL_NUM_VALUES((short)4, "total_num_values"),
    MIN_VALUE((short)5, "min_value"),
    MAX_VALUE((short)6, "max_value");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // UNIT
          return UNIT;
        case 3: // SUM
          return SUM;
        case 4: // TOTAL_NUM_VALUES
          return TOTAL_NUM_VALUES;
        case 5: // MIN_VALUE
          return MIN_VALUE;
        case 6: // MAX_VALUE
          return MAX_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUM_ISSET_ID = 0;
  private static final int __TOTAL_NUM_VALUES_ISSET_ID = 1;
  private static final int __MIN_VALUE_ISSET_ID = 2;
  private static final int __MAX_VALUE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.apache.impala.thrift.TUnit.class)));
    tmpMap.put(_Fields.SUM, new org.apache.thrift.meta_data.FieldMetaData("sum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_NUM_VALUES, new org.apache.thrift.meta_data.FieldMetaData("total_num_values", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MIN_VALUE, new org.apache.thrift.meta_data.FieldMetaData("min_value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_VALUE, new org.apache.thrift.meta_data.FieldMetaData("max_value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSummaryStatsCounter.class, metaDataMap);
  }

  public TSummaryStatsCounter() {
  }

  public TSummaryStatsCounter(
    java.lang.String name,
    org.apache.impala.thrift.TUnit unit,
    long sum,
    long total_num_values,
    long min_value,
    long max_value)
  {
    this();
    this.name = name;
    this.unit = unit;
    this.sum = sum;
    setSumIsSet(true);
    this.total_num_values = total_num_values;
    setTotal_num_valuesIsSet(true);
    this.min_value = min_value;
    setMin_valueIsSet(true);
    this.max_value = max_value;
    setMax_valueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSummaryStatsCounter(TSummaryStatsCounter other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetUnit()) {
      this.unit = other.unit;
    }
    this.sum = other.sum;
    this.total_num_values = other.total_num_values;
    this.min_value = other.min_value;
    this.max_value = other.max_value;
  }

  public TSummaryStatsCounter deepCopy() {
    return new TSummaryStatsCounter(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.unit = null;
    setSumIsSet(false);
    this.sum = 0;
    setTotal_num_valuesIsSet(false);
    this.total_num_values = 0;
    setMin_valueIsSet(false);
    this.min_value = 0;
    setMax_valueIsSet(false);
    this.max_value = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public TSummaryStatsCounter setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  /**
   * 
   * @see org.apache.impala.thrift.TUnit
   */
  @org.apache.thrift.annotation.Nullable
  public org.apache.impala.thrift.TUnit getUnit() {
    return this.unit;
  }

  /**
   * 
   * @see org.apache.impala.thrift.TUnit
   */
  public TSummaryStatsCounter setUnit(@org.apache.thrift.annotation.Nullable org.apache.impala.thrift.TUnit unit) {
    this.unit = unit;
    return this;
  }

  public void unsetUnit() {
    this.unit = null;
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean isSetUnit() {
    return this.unit != null;
  }

  public void setUnitIsSet(boolean value) {
    if (!value) {
      this.unit = null;
    }
  }

  public long getSum() {
    return this.sum;
  }

  public TSummaryStatsCounter setSum(long sum) {
    this.sum = sum;
    setSumIsSet(true);
    return this;
  }

  public void unsetSum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUM_ISSET_ID);
  }

  /** Returns true if field sum is set (has been assigned a value) and false otherwise */
  public boolean isSetSum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUM_ISSET_ID);
  }

  public void setSumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUM_ISSET_ID, value);
  }

  public long getTotal_num_values() {
    return this.total_num_values;
  }

  public TSummaryStatsCounter setTotal_num_values(long total_num_values) {
    this.total_num_values = total_num_values;
    setTotal_num_valuesIsSet(true);
    return this;
  }

  public void unsetTotal_num_values() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTAL_NUM_VALUES_ISSET_ID);
  }

  /** Returns true if field total_num_values is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_num_values() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTAL_NUM_VALUES_ISSET_ID);
  }

  public void setTotal_num_valuesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTAL_NUM_VALUES_ISSET_ID, value);
  }

  public long getMin_value() {
    return this.min_value;
  }

  public TSummaryStatsCounter setMin_value(long min_value) {
    this.min_value = min_value;
    setMin_valueIsSet(true);
    return this;
  }

  public void unsetMin_value() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MIN_VALUE_ISSET_ID);
  }

  /** Returns true if field min_value is set (has been assigned a value) and false otherwise */
  public boolean isSetMin_value() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MIN_VALUE_ISSET_ID);
  }

  public void setMin_valueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MIN_VALUE_ISSET_ID, value);
  }

  public long getMax_value() {
    return this.max_value;
  }

  public TSummaryStatsCounter setMax_value(long max_value) {
    this.max_value = max_value;
    setMax_valueIsSet(true);
    return this;
  }

  public void unsetMax_value() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAX_VALUE_ISSET_ID);
  }

  /** Returns true if field max_value is set (has been assigned a value) and false otherwise */
  public boolean isSetMax_value() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAX_VALUE_ISSET_ID);
  }

  public void setMax_valueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAX_VALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case UNIT:
      if (value == null) {
        unsetUnit();
      } else {
        setUnit((org.apache.impala.thrift.TUnit)value);
      }
      break;

    case SUM:
      if (value == null) {
        unsetSum();
      } else {
        setSum((java.lang.Long)value);
      }
      break;

    case TOTAL_NUM_VALUES:
      if (value == null) {
        unsetTotal_num_values();
      } else {
        setTotal_num_values((java.lang.Long)value);
      }
      break;

    case MIN_VALUE:
      if (value == null) {
        unsetMin_value();
      } else {
        setMin_value((java.lang.Long)value);
      }
      break;

    case MAX_VALUE:
      if (value == null) {
        unsetMax_value();
      } else {
        setMax_value((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case UNIT:
      return getUnit();

    case SUM:
      return getSum();

    case TOTAL_NUM_VALUES:
      return getTotal_num_values();

    case MIN_VALUE:
      return getMin_value();

    case MAX_VALUE:
      return getMax_value();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case UNIT:
      return isSetUnit();
    case SUM:
      return isSetSum();
    case TOTAL_NUM_VALUES:
      return isSetTotal_num_values();
    case MIN_VALUE:
      return isSetMin_value();
    case MAX_VALUE:
      return isSetMax_value();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TSummaryStatsCounter)
      return this.equals((TSummaryStatsCounter)that);
    return false;
  }

  public boolean equals(TSummaryStatsCounter that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_unit = true && this.isSetUnit();
    boolean that_present_unit = true && that.isSetUnit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (!this.unit.equals(that.unit))
        return false;
    }

    boolean this_present_sum = true;
    boolean that_present_sum = true;
    if (this_present_sum || that_present_sum) {
      if (!(this_present_sum && that_present_sum))
        return false;
      if (this.sum != that.sum)
        return false;
    }

    boolean this_present_total_num_values = true;
    boolean that_present_total_num_values = true;
    if (this_present_total_num_values || that_present_total_num_values) {
      if (!(this_present_total_num_values && that_present_total_num_values))
        return false;
      if (this.total_num_values != that.total_num_values)
        return false;
    }

    boolean this_present_min_value = true;
    boolean that_present_min_value = true;
    if (this_present_min_value || that_present_min_value) {
      if (!(this_present_min_value && that_present_min_value))
        return false;
      if (this.min_value != that.min_value)
        return false;
    }

    boolean this_present_max_value = true;
    boolean that_present_max_value = true;
    if (this_present_max_value || that_present_max_value) {
      if (!(this_present_max_value && that_present_max_value))
        return false;
      if (this.max_value != that.max_value)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnit()) ? 131071 : 524287);
    if (isSetUnit())
      hashCode = hashCode * 8191 + unit.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sum);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(total_num_values);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(min_value);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(max_value);

    return hashCode;
  }

  @Override
  public int compareTo(TSummaryStatsCounter other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnit()).compareTo(other.isSetUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unit, other.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSum()).compareTo(other.isSetSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sum, other.sum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotal_num_values()).compareTo(other.isSetTotal_num_values());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_num_values()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_num_values, other.total_num_values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMin_value()).compareTo(other.isSetMin_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_value, other.min_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMax_value()).compareTo(other.isSetMax_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMax_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_value, other.max_value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSummaryStatsCounter(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unit:");
    if (this.unit == null) {
      sb.append("null");
    } else {
      sb.append(this.unit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sum:");
    sb.append(this.sum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_num_values:");
    sb.append(this.total_num_values);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min_value:");
    sb.append(this.min_value);
    first = false;
    if (!first) sb.append(", ");
    sb.append("max_value:");
    sb.append(this.max_value);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (unit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'unit' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'sum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'total_num_values' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'min_value' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'max_value' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSummaryStatsCounterStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSummaryStatsCounterStandardScheme getScheme() {
      return new TSummaryStatsCounterStandardScheme();
    }
  }

  private static class TSummaryStatsCounterStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSummaryStatsCounter> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSummaryStatsCounter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unit = org.apache.impala.thrift.TUnit.findByValue(iprot.readI32());
              struct.setUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sum = iprot.readI64();
              struct.setSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_NUM_VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total_num_values = iprot.readI64();
              struct.setTotal_num_valuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.min_value = iprot.readI64();
              struct.setMin_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.max_value = iprot.readI64();
              struct.setMax_valueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotal_num_values()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'total_num_values' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMin_value()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'min_value' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMax_value()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'max_value' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSummaryStatsCounter struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.unit != null) {
        oprot.writeFieldBegin(UNIT_FIELD_DESC);
        oprot.writeI32(struct.unit.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUM_FIELD_DESC);
      oprot.writeI64(struct.sum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_NUM_VALUES_FIELD_DESC);
      oprot.writeI64(struct.total_num_values);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_VALUE_FIELD_DESC);
      oprot.writeI64(struct.min_value);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_VALUE_FIELD_DESC);
      oprot.writeI64(struct.max_value);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSummaryStatsCounterTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSummaryStatsCounterTupleScheme getScheme() {
      return new TSummaryStatsCounterTupleScheme();
    }
  }

  private static class TSummaryStatsCounterTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSummaryStatsCounter> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSummaryStatsCounter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.name);
      oprot.writeI32(struct.unit.getValue());
      oprot.writeI64(struct.sum);
      oprot.writeI64(struct.total_num_values);
      oprot.writeI64(struct.min_value);
      oprot.writeI64(struct.max_value);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSummaryStatsCounter struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.unit = org.apache.impala.thrift.TUnit.findByValue(iprot.readI32());
      struct.setUnitIsSet(true);
      struct.sum = iprot.readI64();
      struct.setSumIsSet(true);
      struct.total_num_values = iprot.readI64();
      struct.setTotal_num_valuesIsSet(true);
      struct.min_value = iprot.readI64();
      struct.setMin_valueIsSet(true);
      struct.max_value = iprot.readI64();
      struct.setMax_valueIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

